C51 COMPILER V9.56.0.0   BSP_KEY                                                           06/28/2017 23:18:36 PAGE 1   


C51 COMPILER V9.56.0.0, COMPILATION OF MODULE BSP_KEY
OBJECT MODULE PLACED IN .\Out\Objects\bsp_key.obj
COMPILER INVOKED BY: C:\Keil_v5\C51\BIN\C51.EXE ..\Bsp\src\bsp_key.c LARGE OPTIMIZE(8,SPEED) BROWSE INCDIR(..\Common\inc
                    -;..\App\inc;..\Bsp\inc;..\Startup;..\Bsp) DEFINE(FOSC_110592) DEBUG OBJECTEXTEND PRINT(.\Out\Listings\bsp_key.lst) OBJEC
                    -T(.\Out\Objects\bsp_key.obj)

line level    source

   1          /*
   2           *********************************************************************************************************
   3           *
   4           *      模块名称 : 独立按键驱动模块
   5           *      文件名称 : bsp_key.c
   6           *      版    本 : V1.0
   7           *      说    明 : 扫描独立按键，具有软件滤波机制，具有按键FIFO。可以检测如下事件：
   8           *                              (1) 按键按下
   9           *                              (2) 按键弹起
  10           *                              (3) 长按键
  11           *                              (4) 长按时自动连发
  12           *
  13           *********************************************************************************************************
  14           */
  15          
  16          #include "bsp.h"
  17          
  18          static KEY_T s_tBtn[KEY_COUNT];
  19          static KEY_FIFO_T s_tKey; /* 按键FIFO变量,结构体 */
  20          
  21          static void bsp_InitKeyVar(void);
  22          static void bsp_InitKeyHard(void);
  23          static void bsp_DetectKey(uint8_t i);
  24          
  25          /*
  26           *********************************************************************************************************
  27           *      函 数 名: IsKeyDownX
  28           *      功能说明: 判断按键是否按下
  29           *      形    参: 无
  30           *      返 回 值: 返回值1 表示按下，0表示未按下
  31           *********************************************************************************************************
  32           */
  33          static uint8_t IsKeyDown1(void) {
  34   1              return !P03;
  35   1      }
  36          static uint8_t IsKeyDown2(void) {
  37   1              return !P04;
  38   1      }
  39          static uint8_t IsKeyDown3(void) {
  40   1              return !P05;
  41   1      }
  42          static uint8_t IsKeyDown4(void) {
  43   1              return !P06;
  44   1      }
  45          /* S1 S3组合键 */
  46          static uint8_t IsKeyDown_1and3(void) {
  47   1              if ((P03 == 0) && (P05 == 0)) {
  48   2                      return 1;
  49   2              } else {
  50   2                      return 0;
  51   2              }
  52   1      }
  53          /*
C51 COMPILER V9.56.0.0   BSP_KEY                                                           06/28/2017 23:18:36 PAGE 2   

  54           *********************************************************************************************************
  55           *      函 数 名: bsp_InitKey
  56           *      功能说明: 初始化按键. 该函数被 bsp_Init() 调用。
  57           *      形    参:  无
  58           *      返 回 值: 无
  59           *********************************************************************************************************
  60           */
  61          void bsp_InitKey(void) {
  62   1              bsp_InitKeyVar(); /* 初始化按键变量 */
  63   1              bsp_InitKeyHard(); /* 初始化按键硬件 */
  64   1      }
  65          
  66          /*
  67           *********************************************************************************************************
  68           *      函 数 名: bsp_PutKey
  69           *      功能说明: 将1个键值压入按键FIFO缓冲区。可用于模拟一个按键。
  70           *      形    参:  _KeyCode : 按键代码
  71           *      返 回 值: 无
  72           *********************************************************************************************************
  73           */
  74          void bsp_PutKey(uint8_t _KeyCode) {
  75   1              s_tKey.Buf[s_tKey.Write] = _KeyCode;
  76   1      
  77   1              if (++s_tKey.Write >= KEY_FIFO_SIZE) {
  78   2                      s_tKey.Write = 0;
  79   2              }
  80   1      }
  81          
  82          /*
  83           *********************************************************************************************************
  84           *      函 数 名: bsp_GetKey
  85           *      功能说明: 从按键FIFO缓冲区读取一个键值。
  86           *      形    参:  无
  87           *      返 回 值: 按键代码
  88           *********************************************************************************************************
  89           */
  90          uint8_t bsp_GetKey(void) {
  91   1              uint8_t ret;
  92   1      
  93   1              if (s_tKey.Read == s_tKey.Write) {
  94   2                      return KEY_NONE;
  95   2              } else {
  96   2                      ret = s_tKey.Buf[s_tKey.Read];
  97   2      
  98   2                      if (++s_tKey.Read >= KEY_FIFO_SIZE) {
  99   3                              s_tKey.Read = 0;
 100   3                      }
 101   2                      return ret;
 102   2              }
 103   1      }
 104          
 105          /*
 106           *********************************************************************************************************
 107           *      函 数 名: bsp_GetKey2
 108           *      功能说明: 从按键FIFO缓冲区读取一个键值。独立的读指针。
 109           *      形    参:  无
 110           *      返 回 值: 按键代码
 111           *********************************************************************************************************
 112           */
 113          uint8_t bsp_GetKey2(void) {
 114   1              uint8_t ret;
 115   1      
C51 COMPILER V9.56.0.0   BSP_KEY                                                           06/28/2017 23:18:36 PAGE 3   

 116   1              if (s_tKey.Read2 == s_tKey.Write) {
 117   2                      return KEY_NONE;
 118   2              } else {
 119   2                      ret = s_tKey.Buf[s_tKey.Read2];
 120   2      
 121   2                      if (++s_tKey.Read2 >= KEY_FIFO_SIZE) {
 122   3                              s_tKey.Read2 = 0;
 123   3                      }
 124   2                      return ret;
 125   2              }
 126   1      }
 127          
 128          /*
 129           *********************************************************************************************************
 130           *      函 数 名: bsp_GetKeyState
 131           *      功能说明: 读取按键的状态
 132           *      形    参:  _ucKeyID : 按键ID，从0开始
 133           *      返 回 值: 1 表示按下， 0 表示未按下
 134           *********************************************************************************************************
 135           */
 136          uint8_t bsp_GetKeyState(KEY_ID_E _ucKeyID) {
 137   1              return s_tBtn[_ucKeyID].State;
 138   1      }
 139          
 140          /*
 141           *********************************************************************************************************
 142           *      函 数 名: bsp_SetKeyParam
 143           *      功能说明: 设置按键参数
 144           *      形    参：_ucKeyID : 按键ID，从0开始
 145           *                      _LongTime : 长按事件时间
 146           *                       _RepeatSpeed : 连发速度
 147           *      返 回 值: 无
 148           *********************************************************************************************************
 149           */
 150          void bsp_SetKeyParam(uint8_t _ucKeyID, uint16_t _LongTime, uint8_t _RepeatSpeed) {
 151   1              s_tBtn[_ucKeyID].LongTime = _LongTime; /* 长按时间 0 表示不检测长按键事件 */
 152   1              s_tBtn[_ucKeyID].RepeatSpeed = _RepeatSpeed; /* 按键连发的速度，0表示不支持连发 */
 153   1              s_tBtn[_ucKeyID].RepeatCount = 0; /* 连发计数器 */
 154   1      }
 155          
 156          /*
 157           *********************************************************************************************************
 158           *      函 数 名: bsp_ClearKey
 159           *      功能说明: 清空按键FIFO缓冲区
 160           *      形    参：无
 161           *      返 回 值: 按键代码
 162           *********************************************************************************************************
 163           */
 164          void bsp_ClearKey(void) {
 165   1              s_tKey.Read = s_tKey.Write;
 166   1      }
 167          
 168          /*
 169           *********************************************************************************************************
 170           *      函 数 名: bsp_InitKeyHard
 171           *      功能说明: 配置按键对应的GPIO
 172           *      形    参:  无
 173           *      返 回 值: 无
 174           *********************************************************************************************************
 175           */
 176          static void bsp_InitKeyHard(void) {
 177   1      
C51 COMPILER V9.56.0.0   BSP_KEY                                                           06/28/2017 23:18:36 PAGE 4   

 178   1              set_P0M1_3;
 179   1              clr_P0M2_3;
 180   1      
 181   1              set_P0M1_4;
 182   1              clr_P0M2_4;
 183   1      
 184   1              set_P0M1_5;
 185   1              clr_P0M2_5;
 186   1      
 187   1              set_P0M1_6;
 188   1              clr_P0M2_6;
 189   1      
 190   1      }
 191          
 192          /*
 193           *********************************************************************************************************
 194           *      函 数 名: bsp_InitKeyVar
 195           *      功能说明: 初始化按键变量
 196           *      形    参:  无
 197           *      返 回 值: 无
 198           *********************************************************************************************************
 199           */
 200          static void bsp_InitKeyVar(void) {
 201   1              uint8_t i;
 202   1      
 203   1              /* 对按键FIFO读写指针清零 */
 204   1              s_tKey.Read = 0;
 205   1              s_tKey.Write = 0;
 206   1              s_tKey.Read2 = 0;
 207   1      
 208   1              /* 给每个按键结构体成员变量赋一组缺省值 */
 209   1              for (i = 0; i < KEY_COUNT; i++) {
 210   2                      s_tBtn[i].LongTime = KEY_LONG_TIME; /* 长按时间 0 表示不检测长按键事件 */
 211   2                      s_tBtn[i].Count = KEY_FILTER_TIME / 2; /* 计数器设置为滤波时间的一半 */
 212   2                      s_tBtn[i].State = 0; /* 按键缺省状态，0为未按下 */
 213   2                      //s_tBtn[i].KeyCodeDown = 3 * i + 1;                            /* 按键按下的键值代码 */
 214   2                      //s_tBtn[i].KeyCodeUp   = 3 * i + 2;                            /* 按键弹起的键值代码 */
 215   2                      //s_tBtn[i].KeyCodeLong = 3 * i + 3;                            /* 按键被持续按下的键值代码 */
 216   2                      s_tBtn[i].RepeatSpeed = 0; /* 按键连发的速度，0表示不支持连发 */
 217   2                      s_tBtn[i].RepeatCount = 0; /* 连发计数器 */
 218   2              }
 219   1      
 220   1              /* 判断按键按下的函数 */
 221   1              s_tBtn[0].IsKeyDownFunc = IsKeyDown1;
 222   1              s_tBtn[1].IsKeyDownFunc = IsKeyDown2;
 223   1              s_tBtn[2].IsKeyDownFunc = IsKeyDown3;
 224   1              s_tBtn[3].IsKeyDownFunc = IsKeyDown4;
 225   1              s_tBtn[4].IsKeyDownFunc = IsKeyDown_1and3;
 226   1      
 227   1      }
 228          
 229          /*
 230           *********************************************************************************************************
 231           *      函 数 名: bsp_DetectKey
 232           *      功能说明: 检测一个按键。非阻塞状态，必须被周期性的调用。
 233           *      形    参:  按键结构变量指针
 234           *      返 回 值: 无
 235           *********************************************************************************************************
 236           */
 237          KEY_T *pBtn;
 238          static void bsp_DetectKey(uint8_t i) {
 239   1              pBtn = &s_tBtn[i];
C51 COMPILER V9.56.0.0   BSP_KEY                                                           06/28/2017 23:18:36 PAGE 5   

 240   1              if (pBtn->IsKeyDownFunc()) {
 241   2                      if (pBtn->Count < KEY_FILTER_TIME) {
 242   3                              pBtn->Count = KEY_FILTER_TIME;
 243   3                      } else if (pBtn->Count < 2 * KEY_FILTER_TIME) {
 244   3                              pBtn->Count++;
 245   3                      } else {
 246   3                              if (pBtn->State == 0) {
 247   4                                      pBtn->State = 1;
 248   4      
 249   4                                      /* 发送按钮按下的消息 */
 250   4                                      bsp_PutKey((uint8_t) (3 * i + 1));
 251   4                              }
 252   3      
 253   3                              if (pBtn->LongTime > 0) {
 254   4                                      if (pBtn->LongCount < pBtn->LongTime) {
 255   5                                              /* 发送按钮持续按下的消息 */
 256   5                                              if (++pBtn->LongCount == pBtn->LongTime) {
 257   6                                                      /* 键值放入按键FIFO */
 258   6                                                      bsp_PutKey((uint8_t) (3 * i + 3));
 259   6                                              }
 260   5                                      } else {
 261   5                                              if (pBtn->RepeatSpeed > 0) {
 262   6                                                      if (++pBtn->RepeatCount >= pBtn->RepeatSpeed) {
 263   7                                                              pBtn->RepeatCount = 0;
 264   7                                                              /* 常按键后，每隔10ms发送1个按键 */
 265   7                                                              bsp_PutKey((uint8_t) (3 * i + 1));
 266   7                                                      }
 267   6                                              }
 268   5                                      }
 269   4                              }
 270   3                      }
 271   2              } else {
 272   2                      if (pBtn->Count > KEY_FILTER_TIME) {
 273   3                              pBtn->Count = KEY_FILTER_TIME;
 274   3                      } else if (pBtn->Count != 0) {
 275   3                              pBtn->Count--;
 276   3                      } else {
 277   3                              if (pBtn->State == 1) {
 278   4                                      pBtn->State = 0;
 279   4      
 280   4                                      /* 发送按钮弹起的消息 */
 281   4                                      bsp_PutKey((uint8_t) (3 * i + 2));
 282   4                              }
 283   3                      }
 284   2      
 285   2                      pBtn->LongCount = 0;
 286   2                      pBtn->RepeatCount = 0;
 287   2              }
 288   1      }
 289          
 290          /*
 291           *********************************************************************************************************
 292           *      函 数 名: bsp_KeyScan
 293           *      功能说明: 扫描所有按键。非阻塞，被systick中断周期性的调用
 294           *      形    参:  无
 295           *      返 回 值: 无
 296           *********************************************************************************************************
 297           */
 298          void bsp_KeyScan(void) {
 299   1              uint8_t i;
 300   1      
 301   1              for (i = 0; i < KEY_COUNT; i++) {
C51 COMPILER V9.56.0.0   BSP_KEY                                                           06/28/2017 23:18:36 PAGE 6   

 302   2                      bsp_DetectKey(i);
 303   2              }
 304   1      }
 305          
 306          /***************************** (END OF FILE) *********************************/


MODULE INFORMATION:   STATIC OVERLAYABLE
   CODE SIZE        =    816    ----
   CONSTANT SIZE    =   ----    ----
   XDATA SIZE       =     71       2
   PDATA SIZE       =   ----    ----
   DATA SIZE        =   ----    ----
   IDATA SIZE       =   ----    ----
   BIT SIZE         =   ----    ----
END OF MODULE INFORMATION.


C51 COMPILATION COMPLETE.  0 WARNING(S),  0 ERROR(S)
