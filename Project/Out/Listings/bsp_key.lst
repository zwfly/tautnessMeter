C51 COMPILER V9.56.0.0   BSP_KEY                                                           07/05/2017 22:28:33 PAGE 1   


C51 COMPILER V9.56.0.0, COMPILATION OF MODULE BSP_KEY
OBJECT MODULE PLACED IN .\Out\Objects\bsp_key.obj
COMPILER INVOKED BY: C:\Keil_v5\C51\BIN\C51.EXE ..\Bsp\src\bsp_key.c LARGE OPTIMIZE(8,SPEED) BROWSE INCDIR(..\Common\inc
                    -;..\App\inc;..\Bsp\inc;..\Startup;..\Bsp) DEFINE(FOSC_110592) DEBUG OBJECTEXTEND PRINT(.\Out\Listings\bsp_key.lst) OBJEC
                    -T(.\Out\Objects\bsp_key.obj)

line level    source

   1          /*
   2           *********************************************************************************************************
   3           *
   4           *      模块名称 : 独立按键驱动模块
   5           *      文件名称 : bsp_key.c
   6           *      版    本 : V1.0
   7           *      说    明 : 扫描独立按键，具有软件滤波机制，具有按键FIFO。可以检测如下事件：
   8           *                              (1) 按键按下
   9           *                              (2) 按键弹起
  10           *                              (3) 长按键
  11           *                              (4) 长按时自动连发
  12           *
  13           *********************************************************************************************************
  14           */
  15          
  16          #include "bsp.h"
  17          
  18          static KEY_T s_tBtn[KEY_COUNT];
  19          static KEY_FIFO_T s_tKey; /* 按键FIFO变量,结构体 */
  20          
  21          static void bsp_InitKeyVar(void);
  22          static void bsp_InitKeyHard(void);
  23          static void bsp_DetectKey(uint8_t i);
  24          
  25          /*
  26           *********************************************************************************************************
  27           *      函 数 名: IsKeyDownX
  28           *      功能说明: 判断按键是否按下
  29           *      形    参: 无
  30           *      返 回 值: 返回值1 表示按下，0表示未按下
  31           *********************************************************************************************************
  32           */
  33          #if 0
              static uint8_t IsKeyDown1(void) {
                      return !P03;
              }
              static uint8_t IsKeyDown2(void) {
                      return !P04;
              }
              static uint8_t IsKeyDown3(void) {
                      return !P05;
              }
              static uint8_t IsKeyDown4(void) {
                      return !P06;
              }
              #else
  47          static uint8_t IsKeyDown1(void) {
  48   1              if (P03) {
  49   2                      return 0;
  50   2              } else {
  51   2                      return 1;
  52   2              }
  53   1      }
C51 COMPILER V9.56.0.0   BSP_KEY                                                           07/05/2017 22:28:33 PAGE 2   

  54          static uint8_t IsKeyDown2(void) {
  55   1              if (P04) {
  56   2                      return 0;
  57   2              } else {
  58   2                      return 1;
  59   2              }
  60   1      }
  61          static uint8_t IsKeyDown3(void) {
  62   1              if (P05) {
  63   2                      return 0;
  64   2              } else {
  65   2                      return 1;
  66   2              }
  67   1      }
  68          static uint8_t IsKeyDown4(void) {
  69   1              if (P06) {
  70   2                      return 0;
  71   2              } else {
  72   2                      return 1;
  73   2              }
  74   1      }
  75          
  76          #endif
  77          
  78          /* S1 S3组合键 */
  79          static uint8_t IsKeyDown_1and3(void) {
  80   1              if ((P03 == 0) && (P05 == 0)) {
  81   2                      return 1;
  82   2              } else {
  83   2                      return 0;
  84   2              }
  85   1      }
  86          /*
  87           *********************************************************************************************************
  88           *      函 数 名: bsp_InitKey
  89           *      功能说明: 初始化按键. 该函数被 bsp_Init() 调用。
  90           *      形    参:  无
  91           *      返 回 值: 无
  92           *********************************************************************************************************
  93           */
  94          void bsp_InitKey(void) {
  95   1              bsp_InitKeyVar(); /* 初始化按键变量 */
  96   1              bsp_InitKeyHard(); /* 初始化按键硬件 */
  97   1      }
  98          
  99          /*
 100           *********************************************************************************************************
 101           *      函 数 名: bsp_PutKey
 102           *      功能说明: 将1个键值压入按键FIFO缓冲区。可用于模拟一个按键。
 103           *      形    参:  _KeyCode : 按键代码
 104           *      返 回 值: 无
 105           *********************************************************************************************************
 106           */
 107          void bsp_PutKey(uint8_t _KeyCode) {
 108   1              s_tKey.Buf[s_tKey.Write] = _KeyCode;
 109   1      
 110   1              if (++s_tKey.Write >= KEY_FIFO_SIZE) {
 111   2                      s_tKey.Write = 0;
 112   2              }
 113   1      }
 114          
 115          /*
C51 COMPILER V9.56.0.0   BSP_KEY                                                           07/05/2017 22:28:33 PAGE 3   

 116           *********************************************************************************************************
 117           *      函 数 名: bsp_GetKey
 118           *      功能说明: 从按键FIFO缓冲区读取一个键值。
 119           *      形    参:  无
 120           *      返 回 值: 按键代码
 121           *********************************************************************************************************
 122           */
 123          uint8_t bsp_GetKey(void) {
 124   1              uint8_t ret;
 125   1      
 126   1              if (s_tKey.Read == s_tKey.Write) {
 127   2                      return KEY_NONE;
 128   2              } else {
 129   2                      ret = s_tKey.Buf[s_tKey.Read];
 130   2      
 131   2                      if (++s_tKey.Read >= KEY_FIFO_SIZE) {
 132   3                              s_tKey.Read = 0;
 133   3                      }
 134   2                      return ret;
 135   2              }
 136   1      }
 137          
 138          /*
 139           *********************************************************************************************************
 140           *      函 数 名: bsp_GetKey2
 141           *      功能说明: 从按键FIFO缓冲区读取一个键值。独立的读指针。
 142           *      形    参:  无
 143           *      返 回 值: 按键代码
 144           *********************************************************************************************************
 145           */
 146          uint8_t bsp_GetKey2(void) {
 147   1              uint8_t ret;
 148   1      
 149   1              if (s_tKey.Read2 == s_tKey.Write) {
 150   2                      return KEY_NONE;
 151   2              } else {
 152   2                      ret = s_tKey.Buf[s_tKey.Read2];
 153   2      
 154   2                      if (++s_tKey.Read2 >= KEY_FIFO_SIZE) {
 155   3                              s_tKey.Read2 = 0;
 156   3                      }
 157   2                      return ret;
 158   2              }
 159   1      }
 160          
 161          /*
 162           *********************************************************************************************************
 163           *      函 数 名: bsp_GetKeyState
 164           *      功能说明: 读取按键的状态
 165           *      形    参:  _ucKeyID : 按键ID，从0开始
 166           *      返 回 值: 1 表示按下， 0 表示未按下
 167           *********************************************************************************************************
 168           */
 169          uint8_t bsp_GetKeyState(KEY_ID_E _ucKeyID) {
 170   1              return s_tBtn[_ucKeyID].State;
 171   1      }
 172          
 173          /*
 174           *********************************************************************************************************
 175           *      函 数 名: bsp_SetKeyParam
 176           *      功能说明: 设置按键参数
 177           *      形    参：_ucKeyID : 按键ID，从0开始
C51 COMPILER V9.56.0.0   BSP_KEY                                                           07/05/2017 22:28:33 PAGE 4   

 178           *                      _LongTime : 长按事件时间
 179           *                       _RepeatSpeed : 连发速度
 180           *      返 回 值: 无
 181           *********************************************************************************************************
 182           */
 183          void bsp_SetKeyParam(uint8_t _ucKeyID, uint16_t _LongTime, uint8_t _RepeatSpeed) {
 184   1              s_tBtn[_ucKeyID].LongTime = _LongTime; /* 长按时间 0 表示不检测长按键事件 */
 185   1              s_tBtn[_ucKeyID].RepeatSpeed = _RepeatSpeed; /* 按键连发的速度，0表示不支持连发 */
 186   1              s_tBtn[_ucKeyID].RepeatCount = 0; /* 连发计数器 */
 187   1      }
 188          
 189          /*
 190           *********************************************************************************************************
 191           *      函 数 名: bsp_ClearKey
 192           *      功能说明: 清空按键FIFO缓冲区
 193           *      形    参：无
 194           *      返 回 值: 按键代码
 195           *********************************************************************************************************
 196           */
 197          void bsp_ClearKey(void) {
 198   1              s_tKey.Read = s_tKey.Write;
 199   1      }
 200          
 201          /*
 202           *********************************************************************************************************
 203           *      函 数 名: bsp_InitKeyHard
 204           *      功能说明: 配置按键对应的GPIO
 205           *      形    参:  无
 206           *      返 回 值: 无
 207           *********************************************************************************************************
 208           */
 209          static void bsp_InitKeyHard(void) {
 210   1      
 211   1              set_P0M1_3;
 212   1              clr_P0M2_3;
 213   1      
 214   1              set_P0M1_4;
 215   1              clr_P0M2_4;
 216   1      
 217   1              set_P0M1_5;
 218   1              clr_P0M2_5;
 219   1      
 220   1              set_P0M1_6;
 221   1              clr_P0M2_6;
 222   1      
 223   1      }
 224          
 225          /*
 226           *********************************************************************************************************
 227           *      函 数 名: bsp_InitKeyVar
 228           *      功能说明: 初始化按键变量
 229           *      形    参:  无
 230           *      返 回 值: 无
 231           *********************************************************************************************************
 232           */
 233          static void bsp_InitKeyVar(void) {
 234   1              uint8_t i;
 235   1      
 236   1              /* 对按键FIFO读写指针清零 */
 237   1              s_tKey.Read = 0;
 238   1              s_tKey.Write = 0;
 239   1              s_tKey.Read2 = 0;
C51 COMPILER V9.56.0.0   BSP_KEY                                                           07/05/2017 22:28:33 PAGE 5   

 240   1      
 241   1              /* 给每个按键结构体成员变量赋一组缺省值 */
 242   1              for (i = 0; i < KEY_COUNT; i++) {
 243   2                      s_tBtn[i].LongTime = KEY_LONG_TIME; /* 长按时间 0 表示不检测长按键事件 */
 244   2                      s_tBtn[i].Count = KEY_FILTER_TIME / 2; /* 计数器设置为滤波时间的一半 */
 245   2                      s_tBtn[i].State = 0; /* 按键缺省状态，0为未按下 */
 246   2                      //s_tBtn[i].KeyCodeDown = 3 * i + 1;                            /* 按键按下的键值代码 */
 247   2                      //s_tBtn[i].KeyCodeUp   = 3 * i + 2;                            /* 按键弹起的键值代码 */
 248   2                      //s_tBtn[i].KeyCodeLong = 3 * i + 3;                            /* 按键被持续按下的键值代码 */
 249   2                      s_tBtn[i].RepeatSpeed = 0; /* 按键连发的速度，0表示不支持连发 */
 250   2                      s_tBtn[i].RepeatCount = 0; /* 连发计数器 */
 251   2              }
 252   1      
 253   1              /* 判断按键按下的函数 */
 254   1              s_tBtn[0].IsKeyDownFunc = IsKeyDown1;
 255   1              s_tBtn[1].IsKeyDownFunc = IsKeyDown2;
 256   1              s_tBtn[2].IsKeyDownFunc = IsKeyDown3;
 257   1              s_tBtn[3].IsKeyDownFunc = IsKeyDown4;
 258   1              s_tBtn[4].IsKeyDownFunc = IsKeyDown_1and3;
 259   1      
 260   1      }
 261          
 262          /*
 263           *********************************************************************************************************
 264           *      函 数 名: bsp_DetectKey
 265           *      功能说明: 检测一个按键。非阻塞状态，必须被周期性的调用。
 266           *      形    参:  按键结构变量指针
 267           *      返 回 值: 无
 268           *********************************************************************************************************
 269           */
 270          KEY_T *pBtn;
 271          static void bsp_DetectKey(uint8_t i) {
 272   1              pBtn = &s_tBtn[i];
 273   1              if (pBtn->IsKeyDownFunc()) {
 274   2                      if (pBtn->Count < KEY_FILTER_TIME) {
 275   3                              pBtn->Count = KEY_FILTER_TIME;
 276   3                      } else if (pBtn->Count < 2 * KEY_FILTER_TIME) {
 277   3                              pBtn->Count++;
 278   3                      } else {
 279   3                              if (pBtn->State == 0) {
 280   4                                      pBtn->State = 1;
 281   4      
 282   4                                      /* 发送按钮按下的消息 */
 283   4                                      bsp_PutKey((uint8_t) (3 * i + 1));
 284   4                              }
 285   3      
 286   3                              if (pBtn->LongTime > 0) {
 287   4                                      if (pBtn->LongCount < pBtn->LongTime) {
 288   5                                              /* 发送按钮持续按下的消息 */
 289   5                                              if (++pBtn->LongCount == pBtn->LongTime) {
 290   6                                                      /* 键值放入按键FIFO */
 291   6                                                      bsp_PutKey((uint8_t) (3 * i + 3));
 292   6                                              }
 293   5                                      } else {
 294   5                                              if (pBtn->RepeatSpeed > 0) {
 295   6                                                      if (++pBtn->RepeatCount >= pBtn->RepeatSpeed) {
 296   7                                                              pBtn->RepeatCount = 0;
 297   7                                                              /* 常按键后，每隔10ms发送1个按键 */
 298   7                                                              bsp_PutKey((uint8_t) (3 * i + 1));
 299   7                                                      }
 300   6                                              }
 301   5                                      }
C51 COMPILER V9.56.0.0   BSP_KEY                                                           07/05/2017 22:28:33 PAGE 6   

 302   4                              }
 303   3                      }
 304   2              } else {
 305   2                      if (pBtn->Count > KEY_FILTER_TIME) {
 306   3                              pBtn->Count = KEY_FILTER_TIME;
 307   3                      } else if (pBtn->Count != 0) {
 308   3                              pBtn->Count--;
 309   3                      } else {
 310   3                              if (pBtn->State == 1) {
 311   4                                      pBtn->State = 0;
 312   4      
 313   4                                      /* 发送按钮弹起的消息 */
 314   4                                      bsp_PutKey((uint8_t) (3 * i + 2));
 315   4                              }
 316   3                      }
 317   2                      pBtn->LongCount = 0;
 318   2                      pBtn->RepeatCount = 0;
 319   2              }
 320   1      }
 321          
 322          /*
 323           *********************************************************************************************************
 324           *      函 数 名: bsp_KeyScan
 325           *      功能说明: 扫描所有按键。非阻塞，被systick中断周期性的调用
 326           *      形    参:  无
 327           *      返 回 值: 无
 328           *********************************************************************************************************
 329           */
 330          void bsp_KeyScan(void) {
 331   1              uint8_t i;
 332   1      
 333   1              for (i = 0; i < KEY_COUNT; i++) {
 334   2                      bsp_DetectKey(i);
 335   2              }
 336   1      }
 337          
 338          /***************************** (END OF FILE) *********************************/


MODULE INFORMATION:   STATIC OVERLAYABLE
   CODE SIZE        =    812    ----
   CONSTANT SIZE    =   ----    ----
   XDATA SIZE       =     71       2
   PDATA SIZE       =   ----    ----
   DATA SIZE        =   ----    ----
   IDATA SIZE       =   ----    ----
   BIT SIZE         =   ----    ----
END OF MODULE INFORMATION.


C51 COMPILATION COMPLETE.  0 WARNING(S),  0 ERROR(S)
