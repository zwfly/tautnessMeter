C51 COMPILER V9.56.0.0   APP_KEY                                                           09/25/2017 23:21:03 PAGE 1   


C51 COMPILER V9.56.0.0, COMPILATION OF MODULE APP_KEY
OBJECT MODULE PLACED IN .\Out\Objects\app_key.obj
COMPILER INVOKED BY: C:\Keil_v5\C51\BIN\C51.EXE ..\App\src\app_key.c LARGE OPTIMIZE(8,SPEED) BROWSE INCDIR(..\Common\inc
                    -;..\App\inc;..\Bsp\inc;..\Startup;..\Bsp) DEFINE(FOSC_110592) DEBUG OBJECTEXTEND PRINT(.\Out\Listings\app_key.lst) OBJEC
                    -T(.\Out\Objects\app_key.obj)

line level    source

   1          /*
   2           * app_key.c
   3           *
   4           *  Created on: 2017年7月7日
   5           *      Author: admin
   6           */
   7          
   8          #include "app.h"
   9          
  10          DEVICE_T g_tDevice;
  11          
  12          #define BLINK_FLASH_TIME   4
  13          
  14          /*
  15           * level: 0, 拉动时候的界面
  16           *        1,
  17           * */
  18          //uint8_t level = 0;
  19          static void app_UI_init(void);
  20          void app_flash_Clear(void);
  21          void app_flash_Show(void);
  22          
  23          void app_key_init(void) {
  24   1      
  25   1              app_powerKeyInt_close();
  26   1              bsp_hallInt_open();
  27   1      
  28   1      //      g_tWork.mode = E_TRAINING_NONE;
  29   1      
  30   1              g_tDevice.mode = E_Simple_metering_mode;
  31   1              g_tDevice.status = E_PowerOn;
  32   1              g_tDevice.level = E_LEVEL_PULL;
  33   1              g_tDevice.letter = 'A';
  34   1      
  35   1              app_UI_init();
  36   1      
  37   1              Repeat_Stop();
  38   1              Repeat_SetStart(app_flash_Show);
  39   1              Repeat_SetStop(app_flash_Clear);
  40   1              Repeat_Start(BLINK_FLASH_TIME, BLINK_FLASH_TIME, 0);
  41   1      }
  42          void app_powerKeyInt_open(void) {
  43   1              clr_PIPS2;
  44   1              clr_PIPS1;
  45   1              clr_PIPS0;
  46   1      
  47   1              set_PIT6;
  48   1              set_PINEN6;
  49   1              clr_PIPEN6;
  50   1      
  51   1      }
  52          void app_powerKeyInt_close(void) {
  53   1              clr_PIPS2;
C51 COMPILER V9.56.0.0   APP_KEY                                                           09/25/2017 23:21:03 PAGE 2   

  54   1              clr_PIPS1;
  55   1              clr_PIPS0;
  56   1      
  57   1              clr_PIT6;
  58   1              clr_PINEN6;
  59   1              clr_PIPEN6;
  60   1      }
  61          
  62          static void app_UI_init(void) {
  63   1              switch (g_tDevice.mode) {
  64   2              case E_TRAINING_NONE:
  65   2      
  66   2                      break;
  67   2              case E_Simple_metering_mode:
  68   2      
  69   2                      LCD_Clear_REP_Num();
  70   2                      LCD_Show_Pulls_Num(0);
  71   2                      LCD_Show_CAL_Num(0);
  72   2      
  73   2                      LCD_Show_Line_up();
  74   2                      LCD_Clear_REP_ICO();
  75   2      
  76   2                      LCD_Clear_ABCD();
  77   2      
  78   2                      LCD_Show_CAL_ICO();
  79   2                      LCD_Clear_QS_ICO();
  80   2                      LCD_Clear_COACH_ICO();
  81   2      
  82   2                      break;
  83   2              case E_Quick_start_mode:
  84   2      
  85   2                      LCD_Show_REP_ICO();
  86   2                      LCD_Show_Line_up();
  87   2      
  88   2                      LCD_Show_ABCD('A');
  89   2                      LCD_Show_ABCD('B');
  90   2                      LCD_Show_ABCD('C');
  91   2                      LCD_Show_ABCD('D');
  92   2      
  93   2                      LCD_Show_CAL_ICO();
  94   2      
  95   2                      LCD_Clear_COACH_ICO();
  96   2      
  97   2                      break;
  98   2              case E_Coach_mode:
  99   2                      LCD_Show_REP_ICO();
 100   2                      LCD_Show_Line_up();
 101   2      
 102   2                      LCD_Show_ABCD('A');
 103   2                      LCD_Show_ABCD('B');
 104   2                      LCD_Show_ABCD('C');
 105   2                      LCD_Show_ABCD('D');
 106   2      
 107   2                      LCD_Show_CAL_ICO();
 108   2      
 109   2                      LCD_Clear_QS_ICO();
 110   2      
 111   2                      break;
 112   2              }
 113   1      }
 114          
 115          void app_flash_Show(void) {
C51 COMPILER V9.56.0.0   APP_KEY                                                           09/25/2017 23:21:03 PAGE 3   

 116   1      
 117   1              LCD_Show_Line_up();
 118   1              switch (g_tDevice.level) {
 119   2              case E_LEVEL_NONE:
 120   2      
 121   2                      break;
 122   2              case E_LEVEL_MODE:
 123   2      
 124   2                      switch (g_tDevice.mode) {
 125   3                      case E_TRAINING_NONE:
 126   3                              break;
 127   3                      case E_Simple_metering_mode:
 128   3      
 129   3                              break;
 130   3                      case E_Quick_start_mode:
 131   3                              LCD_Show_QS_ICO();
 132   3                              break;
 133   3                      case E_Coach_mode:
 134   3                              LCD_Show_COACH_ICO();
 135   3                              break;
 136   3                      }
 137   2      
 138   2                      break;
 139   2              case E_LEVEL_REP:
 140   2      
 141   2                      switch (g_tDevice.letter) {
 142   3                      case '\0':
 143   3                              g_tDevice.letter = 'A';
 144   3                              break;
 145   3                      case 'A':
 146   3                              LCD_Show_REP_Num(Rep_Pull_num['A' - 'A'][0]);
 147   3                              LCD_Show_Pulls_Num(Rep_Pull_num['A' - 'A'][1]);
 148   3                              break;
 149   3                      case 'B':
 150   3                              LCD_Show_REP_Num(Rep_Pull_num['B' - 'A'][0]);
 151   3                              LCD_Show_Pulls_Num(Rep_Pull_num['B' - 'A'][1]);
 152   3                              break;
 153   3                      case 'C':
 154   3                              LCD_Show_REP_Num(Rep_Pull_num['C' - 'A'][0]);
 155   3                              LCD_Show_Pulls_Num(Rep_Pull_num['C' - 'A'][1]);
 156   3                              break;
 157   3                      case 'D':
 158   3                              LCD_Show_REP_Num(Rep_Pull_num['D' - 'A'][0]);
 159   3                              LCD_Show_Pulls_Num(Rep_Pull_num['D' - 'A'][1]);
 160   3                              break;
 161   3                      default:
 162   3                              g_tDevice.letter = 'A';
 163   3                              break;
 164   3                      }
 165   2                      if (g_tDevice.mode == E_Quick_start_mode) {
 166   3                              LCD_Show_QS_ICO();
 167   3                      } else if (g_tDevice.mode == E_Coach_mode) {
 168   3                              LCD_Show_COACH_ICO();
 169   3                      }
 170   2                      LCD_Show_ABCD_all();
 171   2      
 172   2                      break;
 173   2              case E_LEVEL_READY:
 174   2      
 175   2                      break;
 176   2              case E_LEVEL_PULL:
 177   2      
C51 COMPILER V9.56.0.0   APP_KEY                                                           09/25/2017 23:21:03 PAGE 4   

 178   2                      break;
 179   2              }
 180   1              LCD_Show_Line_up();
 181   1      }
 182          void app_flash_Clear(void) {
 183   1      
 184   1              switch (g_tDevice.level) {
 185   2              case E_LEVEL_NONE:
 186   2                      break;
 187   2              case E_LEVEL_MODE:
 188   2      
 189   2                      LCD_Clear_QS_ICO();
 190   2                      LCD_Clear_COACH_ICO();
 191   2                      break;
 192   2              case E_LEVEL_REP:
 193   2      
 194   2                      if (g_tDevice.letter == '\0') {
 195   3                              LCD_Clear_ABCD();
 196   3                      }
 197   2                      if (g_tDevice.letter == 'A') {
 198   3                              LCD_Clear_ABCD();
 199   3                              LCD_Show_ABCD('A');
 200   3                      }
 201   2                      if (g_tDevice.letter == 'B') {
 202   3                              LCD_Clear_ABCD();
 203   3                              LCD_Show_ABCD('B');
 204   3                      }
 205   2                      if (g_tDevice.letter == 'C') {
 206   3                              LCD_Clear_ABCD();
 207   3                              LCD_Show_ABCD('C');
 208   3                      }
 209   2                      if (g_tDevice.letter == 'D') {
 210   3                              LCD_Clear_ABCD();
 211   3                              LCD_Show_ABCD('D');
 212   3                      }
 213   2                      if (g_tDevice.mode == E_Quick_start_mode) {
 214   3                              LCD_Clear_QS_ICO();
 215   3                      } else if (g_tDevice.mode == E_Coach_mode) {
 216   3                              LCD_Clear_COACH_ICO();
 217   3                      }
 218   2                      break;
 219   2              case E_LEVEL_READY:
 220   2                      break;
 221   2              case E_LEVEL_PULL:
 222   2      
 223   2                      break;
 224   2              }
 225   1      
 226   1      }
 227          void app_key_power(void) {
 228   1      
 229   1              switch (g_tDevice.level) {
 230   2              case E_LEVEL_NONE:
 231   2      
 232   2                      break;
 233   2              case E_LEVEL_MODE:
 234   2      
 235   2                      break;
 236   2              case E_LEVEL_REP:
 237   2      
 238   2                      LCD_Show_ABCD('A');
 239   2                      LCD_Show_ABCD('B');
C51 COMPILER V9.56.0.0   APP_KEY                                                           09/25/2017 23:21:03 PAGE 5   

 240   2                      LCD_Show_ABCD('C');
 241   2                      LCD_Show_ABCD('D');
 242   2      
 243   2                      LCD_Show_REP_Num(0);
 244   2                      LCD_Show_Pulls_Num(0);
 245   2                      LCD_Show_CAL_Num(0);
 246   2                      LCD_Show_CAL_ICO();
 247   2      
 248   2                      g_tDevice.level = E_LEVEL_MODE;
 249   2      
 250   2                      break;
 251   2              case E_LEVEL_READY:
 252   2      
 253   2                      g_tDevice.level = E_LEVEL_REP;
 254   2      
 255   2                      break;
 256   2              case E_LEVEL_PULL:
 257   2      
 258   2      #if 1
 259   2                      g_tWork.sum = 0;
 260   2                      g_tWork.cal_num = 0;
 261   2      
 262   2      //              app_UI_init();
 263   2      
 264   2                      LCD_Show_Pulls_Num(g_tWork.sum);
 265   2                      LCD_Show_CAL_Num(g_tWork.cal_num);
 266   2      
 267   2                      switch (g_tDevice.mode) {
 268   3                      case E_TRAINING_NONE:
 269   3      
 270   3                              break;
 271   3                      case E_Simple_metering_mode:
 272   3      
 273   3                              LCD_Show_Line_up();
 274   3                              LCD_Clear_REP_ICO();
 275   3      
 276   3                              LCD_Clear_REP_Num();
 277   3      
 278   3                              LCD_Clear_ABCD();
 279   3      
 280   3                              LCD_Show_CAL_ICO();
 281   3                              LCD_Clear_QS_ICO();
 282   3                              LCD_Clear_COACH_ICO();
 283   3      
 284   3                              break;
 285   3                      case E_Quick_start_mode:
 286   3      
 287   3                              LCD_Show_Line_up();
 288   3                              LCD_Show_REP_ICO();
 289   3                              LCD_Show_REP_Num(0);
 290   3                              LCD_Show_ABCD(g_tWork.reps_mode);
 291   3      
 292   3                              LCD_Show_CAL_ICO();
 293   3                              LCD_Show_QS_ICO();
 294   3                              LCD_Clear_COACH_ICO();
 295   3                              break;
 296   3                      case E_Coach_mode:
 297   3      
 298   3                              LCD_Show_Line_up();
 299   3                              LCD_Show_REP_ICO();
 300   3                              LCD_Show_REP_Num(0);
 301   3                              LCD_Show_ABCD(g_tWork.reps_mode);
C51 COMPILER V9.56.0.0   APP_KEY                                                           09/25/2017 23:21:03 PAGE 6   

 302   3      
 303   3                              LCD_Show_CAL_ICO();
 304   3                              LCD_Clear_QS_ICO();
 305   3                              LCD_Show_COACH_ICO();
 306   3      
 307   3                              break;
 308   3                      }
 309   2      #endif
 310   2      
 311   2                      break;
 312   2              }
 313   1      
 314   1      }
 315          
 316          void app_key_clear(void) {
 317   1      #if 0
                      LCD_Show_REP_Num(0);
                      LCD_Show_Pulls_Num(0);
                      LCD_Show_CAL_Num(0);
              
                      LCD_Show_Line_up();
                      LCD_Show_REP_ICO();
              
                      LCD_Show_ABCD_all();
              
                      LCD_Show_CAL_ICO();
              
                      g_tDevice.mode = E_Quick_start_mode;
              
                      g_tDevice.level = E_LEVEL_MODE;
              #endif
 333   1      
 334   1              switch (g_tDevice.level) {
 335   2              case E_LEVEL_NONE:
 336   2      
 337   2                      break;
 338   2              case E_LEVEL_MODE:
 339   2                      switch (g_tWork.mode) {
 340   3                      case E_Simple_metering_mode:
 341   3      
 342   3                              break;
 343   3                      case E_Quick_start_mode:
 344   3      
 345   3                              break;
 346   3                      case E_Coach_mode:
 347   3      
 348   3                              break;
 349   3                      }
 350   2                      break;
 351   2              case E_LEVEL_REP:
 352   2                      g_tDevice.level = E_LEVEL_MODE;
 353   2      
 354   2                      LCD_Show_ABCD('A');
 355   2                      LCD_Show_ABCD('B');
 356   2                      LCD_Show_ABCD('C');
 357   2                      LCD_Show_ABCD('D');
 358   2      
 359   2                      LCD_Show_REP_Num(0);
 360   2                      LCD_Show_Pulls_Num(0);
 361   2                      LCD_Show_CAL_Num(0);
 362   2                      LCD_Show_CAL_ICO();
 363   2      
C51 COMPILER V9.56.0.0   APP_KEY                                                           09/25/2017 23:21:03 PAGE 7   

 364   2                      break;
 365   2              case E_LEVEL_READY:
 366   2                      g_tDevice.level = E_LEVEL_REP;
 367   2      
 368   2                      break;
 369   2              case E_LEVEL_PULL:
 370   2      
 371   2                      break;
 372   2              }
 373   1      }
 374          
 375          static void app_key_clear_long(void) {
 376   1      
 377   1              switch (g_tDevice.level) {
 378   2              case E_LEVEL_NONE:
 379   2      
 380   2                      break;
 381   2              case E_LEVEL_MODE:
 382   2      
 383   2                      break;
 384   2              case E_LEVEL_REP:
 385   2      
 386   2                      break;
 387   2              case E_LEVEL_READY:
 388   2      
 389   2                      break;
 390   2              case E_LEVEL_PULL:
 391   2                      g_tWork.reps_num = 0;
 392   2                      g_tWork.pulls_num = 0;
 393   2                      g_tWork.cal_num = 0;
 394   2                      g_tWork.sum = 0;
 395   2      
 396   2                      LCD_Show_REP_Num(g_tWork.reps_num);
 397   2                      LCD_Show_Pulls_Num(g_tWork.pulls_num);
 398   2                      LCD_Show_CAL_Num(g_tWork.cal_num);
 399   2      
 400   2                      BEEP_Stop();
 401   2                      g_tDevice.level = E_LEVEL_READY;
 402   2      
 403   2                      break;
 404   2              }
 405   1      }
 406          
 407          void app_key_set(void) {
 408   1      
 409   1              switch (g_tDevice.level) {
 410   2              case E_LEVEL_NONE:
 411   2      
 412   2                      break;
 413   2              case E_LEVEL_MODE:
 414   2                      switch (g_tDevice.mode) {
 415   3                      case E_TRAINING_NONE:
 416   3      
 417   3                              break;
 418   3                      case E_Simple_metering_mode:
 419   3                              g_tDevice.mode = E_Quick_start_mode;
 420   3      
 421   3                              LCD_Show_REP_Num(0);
 422   3                              LCD_Show_REP_ICO();
 423   3                              LCD_Show_Line_up();
 424   3      
 425   3                              LCD_Show_ABCD('A');
C51 COMPILER V9.56.0.0   APP_KEY                                                           09/25/2017 23:21:03 PAGE 8   

 426   3                              LCD_Show_ABCD('B');
 427   3                              LCD_Show_ABCD('C');
 428   3                              LCD_Show_ABCD('D');
 429   3      
 430   3                              LCD_Show_CAL_ICO();
 431   3      
 432   3                              LCD_Clear_COACH_ICO();
 433   3      
 434   3                              break;
 435   3                      case E_Quick_start_mode:
 436   3                              g_tDevice.mode = E_Coach_mode;
 437   3      
 438   3                              LCD_Show_REP_Num(0);
 439   3                              LCD_Show_REP_ICO();
 440   3                              LCD_Show_Line_up();
 441   3      
 442   3                              LCD_Show_ABCD('A');
 443   3                              LCD_Show_ABCD('B');
 444   3                              LCD_Show_ABCD('C');
 445   3                              LCD_Show_ABCD('D');
 446   3      
 447   3                              LCD_Show_CAL_ICO();
 448   3      
 449   3                              LCD_Clear_COACH_ICO();
 450   3                              break;
 451   3                      case E_Coach_mode:
 452   3                              g_tDevice.mode = E_Simple_metering_mode;
 453   3      
 454   3                              LCD_Show_Line_up();
 455   3                              LCD_Clear_REP_ICO();
 456   3      
 457   3                              LCD_Clear_ABCD();
 458   3      
 459   3                              LCD_Show_CAL_ICO();
 460   3                              LCD_Clear_QS_ICO();
 461   3                              LCD_Clear_COACH_ICO();
 462   3      
 463   3                              LCD_Clear_REP_Num();
 464   3      
 465   3                              break;
 466   3                      }
 467   2                      break;
 468   2              case E_LEVEL_REP:
 469   2                      switch (g_tDevice.mode) {
 470   3                      case E_TRAINING_NONE:
 471   3      
 472   3                              break;
 473   3                      case E_Simple_metering_mode:
 474   3      
 475   3                              break;
 476   3                      case E_Quick_start_mode:
 477   3      
 478   3                              if (g_tDevice.letter == '\0') {
 479   4                                      g_tDevice.letter = 'A';
 480   4                              } else {
 481   4                                      g_tDevice.letter++;
 482   4                                      if (g_tDevice.letter > 'D') {
 483   5                                              g_tDevice.letter = 'A';
 484   5                                      }
 485   4                              }
 486   3      
 487   3                              break;
C51 COMPILER V9.56.0.0   APP_KEY                                                           09/25/2017 23:21:03 PAGE 9   

 488   3                      case E_Coach_mode:
 489   3                              if (g_tDevice.letter == '\0') {
 490   4                                      g_tDevice.letter = 'A';
 491   4                              } else {
 492   4                                      g_tDevice.letter++;
 493   4                                      if (g_tDevice.letter > 'D') {
 494   5                                              g_tDevice.letter = 'A';
 495   5                                      }
 496   4                              }
 497   3                              break;
 498   3                      }
 499   2                      break;
 500   2              case E_LEVEL_READY:
 501   2                      break;
 502   2              case E_LEVEL_PULL:
 503   2      
 504   2                      break;
 505   2              }
 506   1      }
 507          
 508          static void app_key_set_long(void) {
 509   1      
 510   1              switch (g_tDevice.level) {
 511   2              case E_LEVEL_NONE:
 512   2      
 513   2                      break;
 514   2              case E_LEVEL_MODE:
 515   2      
 516   2                      break;
 517   2              case E_LEVEL_REP:
 518   2      
 519   2                      break;
 520   2              case E_LEVEL_READY:
 521   2      
 522   2                      break;
 523   2              case E_LEVEL_PULL:
 524   2                      if (g_tDevice.mode == E_Simple_metering_mode) {
 525   3                              g_tDevice.mode = E_Quick_start_mode;
 526   3                              g_tDevice.level = E_LEVEL_MODE;
 527   3                      } else {
 528   3                              g_tDevice.mode = g_tWork.mode;
 529   3                              g_tDevice.level = E_LEVEL_REP;
 530   3                      }
 531   2      
 532   2                      g_tWork.reps_num = 0;
 533   2                      g_tWork.pulls_num = 0;
 534   2                      g_tWork.cal_num = 0;
 535   2                      g_tWork.sum = 0;
 536   2      
 537   2                      LCD_Show_REP_Num(g_tWork.reps_num);
 538   2                      LCD_Show_Pulls_Num(g_tWork.pulls_num);
 539   2                      LCD_Show_CAL_Num(g_tWork.cal_num);
 540   2      
 541   2                      LCD_Show_CAL_ICO();
 542   2                      LCD_Show_REP_ICO();
 543   2                      LCD_Show_Line_up();
 544   2      
 545   2                      LCD_Show_ABCD('A');
 546   2                      LCD_Show_ABCD('B');
 547   2                      LCD_Show_ABCD('C');
 548   2                      LCD_Show_ABCD('D');
 549   2      
C51 COMPILER V9.56.0.0   APP_KEY                                                           09/25/2017 23:21:03 PAGE 10  

 550   2                      BEEP_Stop();
 551   2                      break;
 552   2              }
 553   1      
 554   1      }
 555          
 556          void app_key_ok(void) {
 557   1      
 558   1              switch (g_tDevice.level) {
 559   2              case E_LEVEL_NONE:
 560   2      
 561   2                      break;
 562   2              case E_LEVEL_MODE:
 563   2      
 564   2                      switch (g_tDevice.mode) {
 565   3                      case E_TRAINING_NONE:
 566   3      
 567   3                              break;
 568   3                      case E_Simple_metering_mode:
 569   3                              g_tDevice.level = E_LEVEL_READY;
 570   3                              break;
 571   3                      case E_Quick_start_mode:
 572   3                              g_tDevice.level = E_LEVEL_REP;
 573   3      
 574   3                              LCD_Show_REP_ICO();
 575   3                              LCD_Show_QS_ICO();
 576   3                              LCD_Clear_COACH_ICO();
 577   3      
 578   3                              break;
 579   3                      case E_Coach_mode:
 580   3                              g_tDevice.level = E_LEVEL_REP;
 581   3      
 582   3                              LCD_Show_REP_ICO();
 583   3                              LCD_Clear_QS_ICO();
 584   3                              LCD_Show_COACH_ICO();
 585   3      
 586   3                              break;
 587   3                      }
 588   2                      g_tDevice.letter = g_tWork.reps_mode;
 589   2      
 590   2                      break;
 591   2              case E_LEVEL_REP:
 592   2                      switch (g_tDevice.mode) {
 593   3                      case E_TRAINING_NONE:
 594   3      
 595   3                              break;
 596   3                      case E_Simple_metering_mode:
 597   3      
 598   3                              break;
 599   3                      case E_Quick_start_mode:
 600   3      
 601   3                              LCD_Show_QS_ICO();
 602   3                              LCD_Clear_COACH_ICO();
 603   3      
 604   3                              break;
 605   3                      case E_Coach_mode:
 606   3                              LCD_Show_COACH_ICO();
 607   3                              LCD_Clear_QS_ICO();
 608   3      
 609   3                              break;
 610   3                      }
 611   2                      g_tWork.mode = g_tDevice.mode;
C51 COMPILER V9.56.0.0   APP_KEY                                                           09/25/2017 23:21:03 PAGE 11  

 612   2                      g_tWork.reps_mode = g_tDevice.letter;
 613   2                      g_tWork.sum = 0;
 614   2                      g_tDevice.level = E_LEVEL_READY;
 615   2      
 616   2                      LCD_Clear_ABCD();
 617   2                      LCD_Show_ABCD(g_tDevice.letter);
 618   2      
 619   2                      break;
 620   2              case E_LEVEL_READY:
 621   2      
 622   2                      break;
 623   2              case E_LEVEL_PULL:
 624   2      
 625   2                      break;
 626   2              }
 627   1      }
 628          
 629          static void app_key_ok_long(void) {
 630   1      
 631   1              switch (g_tDevice.level) {
 632   2              case E_LEVEL_NONE:
 633   2      
 634   2                      break;
 635   2              case E_LEVEL_MODE:
 636   2      
 637   2                      break;
 638   2              case E_LEVEL_REP:
 639   2      
 640   2                      break;
 641   2              case E_LEVEL_READY:
 642   2      
 643   2                      break;
 644   2              case E_LEVEL_PULL:
 645   2      
 646   2                      break;
 647   2              }
 648   1              SW_Reset();  //复位
 649   1      }
 650          
 651          void app_power_on(void) {
 652   1              SW_Reset();  //复位
 653   1      }
 654          void app_power_off(void) {
 655   1              lcd_bright_off();
 656   1              LCD_Clear_All();
 657   1      }
 658          
 659          uint8_t noOps_timeoutCnt = 0;
 660          static BIT offBight_flag = 0;
 661          
 662          void app_key_100ms_pro(void) {
 663   1              static uint8_t cnt = 0;
 664   1      
 665   1              if (g_tDevice.status == E_PowerDown) {
 666   2                      cnt++;
 667   2                      if (cnt >= 2) {
 668   3                              cnt = 0;
 669   3      
 670   3                              app_key_clear_noOps_timeoutCnt();
 671   3      //                      keyInvalid_flag = 1;
 672   3                              bsp_hallInt_close();
 673   3                              app_powerKeyInt_open();
C51 COMPILER V9.56.0.0   APP_KEY                                                           09/25/2017 23:21:03 PAGE 12  

 674   3      //                      printf("power off\n");
 675   3                              set_PD;
 676   3      
 677   3                              printf("power on\n");
 678   3                              app_power_on();
 679   3                      }
 680   2              } else {
 681   2                      cnt = 0;
 682   2              }
 683   1      }
 684          
 685          void app_key_1s_pro(void) {
 686   1      
 687   1              noOps_timeoutCnt++;
 688   1              if (noOps_timeoutCnt == 400) {
 689   2                      offBight_flag = 1;
 690   2      //              keyInvalid_flag = 1;
 691   2                      lcd_bright_off();
 692   2                      printf("off bright\n");
 693   2              } else if (noOps_timeoutCnt == 500) {
 694   2                      app_power_off();
 695   2                      printf("power off\n");
 696   2                      g_tDevice.status = E_PowerDown;
 697   2              }
 698   1      
 699   1      }
 700          void app_key_clear_noOps_timeoutCnt(void) {
 701   1              noOps_timeoutCnt = 0;
 702   1      }
 703          void app_key_pro(uint8_t keyCode) {
 704   1              static BIT key_exe_flag = 0;
 705   1      
 706   1              app_key_clear_noOps_timeoutCnt();
 707   1      
 708   1              if (offBight_flag && (g_tDevice.status == E_PowerOn)) {
 709   2                      offBight_flag = 0;
 710   2                      lcd_bright_on();
 711   2                      //      keyInvalid_flag = 1;
 712   2                      return;
 713   2              }
 714   1      
 715   1              switch (keyCode) {
 716   2              case KEY_UP_K1:
 717   2      
 718   2                      break;
 719   2              case KEY_DOWN_K1:
 720   2      
 721   2                      break;
 722   2              case KEY_LONG_K1:
 723   2                      printf("POWER long\n");
 724   2                      if (g_tDevice.status == E_PowerOn) {
 725   3                              g_tDevice.status = E_PowerDown;
 726   3                              printf("key power off\n");
 727   3                              app_power_off();
 728   3                      }
 729   2      
 730   2                      break;
 731   2              case KEY_UP_K2:
 732   2                      if (key_exe_flag) {
 733   3                              key_exe_flag = 0;
 734   3                      } else {
 735   3                              printf("CLEAR click\n");
C51 COMPILER V9.56.0.0   APP_KEY                                                           09/25/2017 23:21:03 PAGE 13  

 736   3                              app_key_clear();
 737   3                      }
 738   2      
 739   2                      break;
 740   2              case KEY_DOWN_K2:
 741   2      
 742   2                      break;
 743   2              case KEY_LONG_K2:
 744   2                      printf("CLEAR long\n");
 745   2                      key_exe_flag = 1;
 746   2                      app_key_clear_long();
 747   2      
 748   2                      break;
 749   2              case KEY_UP_K3:
 750   2                      if (key_exe_flag) {
 751   3                              key_exe_flag = 0;
 752   3                      } else {
 753   3                              printf("SET click\n");
 754   3                              app_key_set();
 755   3                      }
 756   2                      break;
 757   2              case KEY_DOWN_K3:
 758   2      
 759   2                      break;
 760   2              case KEY_LONG_K3:
 761   2                      printf("SET long\n");
 762   2                      key_exe_flag = 1;
 763   2                      app_key_set_long();
 764   2      
 765   2                      break;
 766   2              case KEY_UP_K4:
 767   2                      if (key_exe_flag) {
 768   3                              key_exe_flag = 0;
 769   3                      } else {
 770   3                              printf("OK click\n");
 771   3                              app_key_ok();
 772   3                      }
 773   2                      break;
 774   2              case KEY_DOWN_K4:
 775   2      
 776   2                      break;
 777   2              case KEY_LONG_K4:
 778   2                      printf("OK long\n");
 779   2                      key_exe_flag = 1;
 780   2                      app_key_ok_long();
 781   2      
 782   2                      break;
 783   2      #if DEBUG_KEY
                              case KEY_UP_K5:
              
                              break;
                              case KEY_DOWN_K5:
                              //BEEP_KeyTone();
                              query_work_sum();
                              break;
                              case KEY_LONG_K5:
              
                              break;
              #endif
 795   2              case KEY_UP_K1K3:
 796   2      
 797   2                      break;
C51 COMPILER V9.56.0.0   APP_KEY                                                           09/25/2017 23:21:03 PAGE 14  

 798   2              case KEY_DOWN_K1K3:
 799   2      
 800   2                      break;
 801   2              case KEY_LONG_K1K3:
 802   2      
 803   2                      break;
 804   2              default:
 805   2      //              BEEP_KeyTone();
 806   2                      break;
 807   2      
 808   2              }
 809   1      }
 810          


MODULE INFORMATION:   STATIC OVERLAYABLE
   CODE SIZE        =   1591    ----
   CONSTANT SIZE    =    125    ----
   XDATA SIZE       =      6       1
   PDATA SIZE       =   ----    ----
   DATA SIZE        =   ----    ----
   IDATA SIZE       =   ----    ----
   BIT SIZE         =      2    ----
END OF MODULE INFORMATION.


C51 COMPILATION COMPLETE.  0 WARNING(S),  0 ERROR(S)
