C51 COMPILER V9.52.0.0   APP_KEY                                                           09/09/2018 09:18:08 PAGE 1   


C51 COMPILER V9.52.0.0, COMPILATION OF MODULE APP_KEY
OBJECT MODULE PLACED IN .\Out\Objects\app_key.obj
COMPILER INVOKED BY: C:\Keil_v5\C51\BIN\C51.EXE ..\App\src\app_key.c LARGE OPTIMIZE(8,SPEED) BROWSE INCDIR(..\Common\inc
                    -;..\App\inc;..\Bsp\inc;..\Startup;..\Bsp) DEFINE(FOSC_110592) DEBUG OBJECTEXTEND PRINT(.\Out\Listings\app_key.lst) OBJEC
                    -T(.\Out\Objects\app_key.obj)

line level    source

   1          /*
   2           * app_key.c
   3           *
   4           *  Created on: 2017年7月7日
   5           *      Author: admin
   6           */
   7          
   8          #include "app.h"
   9          
  10          DEVICE_T g_tDevice;
  11          
  12          #define BLINK_FLASH_TIME   4
  13          
  14          /*
  15           * level: 0, 拉动时候的界面
  16           *        1,
  17           * */
  18          //uint8_t level = 0;
  19          static void app_UI_init(void);
  20          void app_flash_Clear(void);
  21          void app_flash_Show(void);
  22          
  23          void app_key_init(void) {
  24   1      
  25   1              app_powerKeyInt_close();
  26   1              bsp_hallInt_open();
  27   1      
  28   1      //      g_tWork.mode = E_TRAINING_NONE;
  29   1      
  30   1              g_tDevice.mode = E_Simple_metering_mode;
  31   1              g_tDevice.status = E_PowerOn;
  32   1              g_tDevice.level = E_LEVEL_PULL;
  33   1              g_tDevice.letter = 'A';
  34   1      
  35   1              app_UI_init();
  36   1      
  37   1              Repeat_Stop();
  38   1              Repeat_SetStart(app_flash_Show);
  39   1              Repeat_SetStop(app_flash_Clear);
  40   1              Repeat_Start(BLINK_FLASH_TIME, BLINK_FLASH_TIME, 0);
  41   1      }
  42          void app_powerKeyInt_open(void) {
  43   1              clr_PIPS2;
  44   1              clr_PIPS1;
  45   1              clr_PIPS0;
  46   1      
  47   1              set_PIT6;
  48   1              set_PINEN6;
  49   1              clr_PIPEN6;
  50   1      
  51   1      }
  52          void app_powerKeyInt_close(void) {
  53   1              clr_PIPS2;
C51 COMPILER V9.52.0.0   APP_KEY                                                           09/09/2018 09:18:08 PAGE 2   

  54   1              clr_PIPS1;
  55   1              clr_PIPS0;
  56   1      
  57   1              clr_PIT6;
  58   1              clr_PINEN6;
  59   1              clr_PIPEN6;
  60   1      }
  61          
  62          static void app_UI_init(void) {
  63   1              switch (g_tDevice.mode) {
  64   2              case E_TRAINING_NONE:
  65   2      
  66   2                      break;
  67   2              case E_Simple_metering_mode:
  68   2      
  69   2                      LCD_Clear_REP_Num();
  70   2                      LCD_Show_Pulls_Num(0);
  71   2                      LCD_Show_CAL_Num(0);
  72   2      
  73   2                      LCD_Show_Line_up();
  74   2                      LCD_Clear_REP_ICO();
  75   2      
  76   2                      LCD_Clear_ABCD();
  77   2      
  78   2                      LCD_Show_CAL_ICO();
  79   2                      LCD_Clear_QS_ICO();
  80   2                      LCD_Clear_COACH_ICO();
  81   2      
  82   2                      break;
  83   2              case E_Quick_start_mode:
  84   2      
  85   2                      LCD_Show_REP_ICO();
  86   2                      LCD_Show_Line_up();
  87   2      
  88   2                      LCD_Show_ABCD('A');
  89   2                      LCD_Show_ABCD('B');
  90   2                      LCD_Show_ABCD('C');
  91   2                      LCD_Show_ABCD('D');
  92   2      
  93   2                      LCD_Show_CAL_ICO();
  94   2      
  95   2                      LCD_Clear_COACH_ICO();
  96   2      
  97   2                      break;
  98   2              case E_Coach_mode:
  99   2                      LCD_Show_REP_ICO();
 100   2                      LCD_Show_Line_up();
 101   2      
 102   2                      LCD_Show_ABCD('A');
 103   2                      LCD_Show_ABCD('B');
 104   2                      LCD_Show_ABCD('C');
 105   2                      LCD_Show_ABCD('D');
 106   2      
 107   2                      LCD_Show_CAL_ICO();
 108   2      
 109   2                      LCD_Clear_QS_ICO();
 110   2      
 111   2                      break;
 112   2              }
 113   1      }
 114          
 115          void app_flash_Show(void) {
C51 COMPILER V9.52.0.0   APP_KEY                                                           09/09/2018 09:18:08 PAGE 3   

 116   1      
 117   1              LCD_Show_Line_up();
 118   1              switch (g_tDevice.level) {
 119   2              case E_LEVEL_NONE:
 120   2      
 121   2                      break;
 122   2              case E_LEVEL_MODE:
 123   2      
 124   2                      switch (g_tDevice.mode) {
 125   3                      case E_TRAINING_NONE:
 126   3                              break;
 127   3                      case E_Simple_metering_mode:
 128   3      
 129   3                              break;
 130   3                      case E_Quick_start_mode:
 131   3                              LCD_Show_QS_ICO();
 132   3                              break;
 133   3                      case E_Coach_mode:
 134   3                              LCD_Show_COACH_ICO();
 135   3                              break;
 136   3                      }
 137   2      
 138   2                      break;
 139   2              case E_LEVEL_REP:
 140   2      
 141   2                      switch (g_tDevice.letter) {
 142   3                      case '\0':
 143   3                              g_tDevice.letter = 'A';
 144   3                              break;
 145   3                      case 'A':
 146   3                              LCD_Show_REP_Num(Rep_Pull_num['A' - 'A'][0]);
 147   3                              LCD_Show_Pulls_Num(Rep_Pull_num['A' - 'A'][1]);
 148   3                              break;
 149   3                      case 'B':
 150   3                              LCD_Show_REP_Num(Rep_Pull_num['B' - 'A'][0]);
 151   3                              LCD_Show_Pulls_Num(Rep_Pull_num['B' - 'A'][1]);
 152   3                              break;
 153   3                      case 'C':
 154   3                              LCD_Show_REP_Num(Rep_Pull_num['C' - 'A'][0]);
 155   3                              LCD_Show_Pulls_Num(Rep_Pull_num['C' - 'A'][1]);
 156   3                              break;
 157   3                      case 'D':
 158   3                              LCD_Show_REP_Num(Rep_Pull_num['D' - 'A'][0]);
 159   3                              LCD_Show_Pulls_Num(Rep_Pull_num['D' - 'A'][1]);
 160   3                              break;
 161   3                      default:
 162   3                              g_tDevice.letter = 'A';
 163   3                              break;
 164   3                      }
 165   2                      if (g_tDevice.mode == E_Quick_start_mode) {
 166   3                              LCD_Show_QS_ICO();
 167   3                      } else if (g_tDevice.mode == E_Coach_mode) {
 168   3                              LCD_Show_COACH_ICO();
 169   3                      }
 170   2                      LCD_Show_ABCD_all();
 171   2      
 172   2                      break;
 173   2              case E_LEVEL_READY:
 174   2      
 175   2                      break;
 176   2              case E_LEVEL_PULL:
 177   2      
C51 COMPILER V9.52.0.0   APP_KEY                                                           09/09/2018 09:18:08 PAGE 4   

 178   2                      break;
 179   2              }
 180   1              LCD_Show_Line_up();
 181   1      }
 182          void app_flash_Clear(void) {
 183   1      
 184   1              switch (g_tDevice.level) {
 185   2              case E_LEVEL_NONE:
 186   2                      break;
 187   2              case E_LEVEL_MODE:
 188   2      
 189   2                      LCD_Clear_QS_ICO();
 190   2                      LCD_Clear_COACH_ICO();
 191   2                      break;
 192   2              case E_LEVEL_REP:
 193   2      
 194   2                      if (g_tDevice.letter == '\0') {
 195   3                              LCD_Clear_ABCD();
 196   3                      }
 197   2                      if (g_tDevice.letter == 'A') {
 198   3                              LCD_Clear_ABCD();
 199   3                              LCD_Show_ABCD('A');
 200   3                      }
 201   2                      if (g_tDevice.letter == 'B') {
 202   3                              LCD_Clear_ABCD();
 203   3                              LCD_Show_ABCD('B');
 204   3                      }
 205   2                      if (g_tDevice.letter == 'C') {
 206   3                              LCD_Clear_ABCD();
 207   3                              LCD_Show_ABCD('C');
 208   3                      }
 209   2                      if (g_tDevice.letter == 'D') {
 210   3                              LCD_Clear_ABCD();
 211   3                              LCD_Show_ABCD('D');
 212   3                      }
 213   2                      if (g_tDevice.mode == E_Quick_start_mode) {
 214   3                              LCD_Clear_QS_ICO();
 215   3                      } else if (g_tDevice.mode == E_Coach_mode) {
 216   3                              LCD_Clear_COACH_ICO();
 217   3                      }
 218   2                      break;
 219   2              case E_LEVEL_READY:
 220   2                      break;
 221   2              case E_LEVEL_PULL:
 222   2      
 223   2                      break;
 224   2              }
 225   1      
 226   1      }
 227          void app_key_power(void) {
 228   1      
 229   1              switch (g_tDevice.level) {
 230   2              case E_LEVEL_NONE:
 231   2      
 232   2                      break;
 233   2              case E_LEVEL_MODE:
 234   2      
 235   2                      break;
 236   2              case E_LEVEL_REP:
 237   2      
 238   2                      LCD_Show_ABCD('A');
 239   2                      LCD_Show_ABCD('B');
C51 COMPILER V9.52.0.0   APP_KEY                                                           09/09/2018 09:18:08 PAGE 5   

 240   2                      LCD_Show_ABCD('C');
 241   2                      LCD_Show_ABCD('D');
 242   2      
 243   2                      LCD_Show_REP_Num(0);
 244   2                      LCD_Show_Pulls_Num(0);
 245   2                      LCD_Show_CAL_Num(0);
 246   2                      LCD_Show_CAL_ICO();
 247   2      
 248   2                      g_tDevice.level = E_LEVEL_MODE;
 249   2      
 250   2                      break;
 251   2              case E_LEVEL_READY:
 252   2      
 253   2                      g_tDevice.level = E_LEVEL_REP;
 254   2      
 255   2                      break;
 256   2              case E_LEVEL_PULL:
 257   2      
 258   2      #if 1
 259   2                      g_tWork.sum = 0;
 260   2                      g_tWork.cal_num = 0;
 261   2      
 262   2      //              app_UI_init();
 263   2      
 264   2                      LCD_Show_Pulls_Num(g_tWork.sum);
 265   2                      LCD_Show_CAL_Num(g_tWork.cal_num);
 266   2      
 267   2                      switch (g_tDevice.mode) {
 268   3                      case E_TRAINING_NONE:
 269   3      
 270   3                              break;
 271   3                      case E_Simple_metering_mode:
 272   3      
 273   3                              LCD_Show_Line_up();
 274   3                              LCD_Clear_REP_ICO();
 275   3      
 276   3                              LCD_Clear_REP_Num();
 277   3      
 278   3                              LCD_Clear_ABCD();
 279   3      
 280   3                              LCD_Show_CAL_ICO();
 281   3                              LCD_Clear_QS_ICO();
 282   3                              LCD_Clear_COACH_ICO();
 283   3      
 284   3                              break;
 285   3                      case E_Quick_start_mode:
 286   3      
 287   3                              LCD_Show_Line_up();
 288   3                              LCD_Show_REP_ICO();
 289   3                              LCD_Show_REP_Num(0);
 290   3                              LCD_Show_ABCD(g_tWork.reps_mode);
 291   3      
 292   3                              LCD_Show_CAL_ICO();
 293   3                              LCD_Show_QS_ICO();
 294   3                              LCD_Clear_COACH_ICO();
 295   3                              break;
 296   3                      case E_Coach_mode:
 297   3      
 298   3                              LCD_Show_Line_up();
 299   3                              LCD_Show_REP_ICO();
 300   3                              LCD_Show_REP_Num(0);
 301   3                              LCD_Show_ABCD(g_tWork.reps_mode);
C51 COMPILER V9.52.0.0   APP_KEY                                                           09/09/2018 09:18:08 PAGE 6   

 302   3      
 303   3                              LCD_Show_CAL_ICO();
 304   3                              LCD_Clear_QS_ICO();
 305   3                              LCD_Show_COACH_ICO();
 306   3      
 307   3                              break;
 308   3                      }
 309   2      #endif
 310   2      
 311   2                      break;
 312   2              }
 313   1      
 314   1      }
 315          
 316          void app_key_clear(void) {
 317   1      #if 0
                      LCD_Show_REP_Num(0);
                      LCD_Show_Pulls_Num(0);
                      LCD_Show_CAL_Num(0);
              
                      LCD_Show_Line_up();
                      LCD_Show_REP_ICO();
              
                      LCD_Show_ABCD_all();
              
                      LCD_Show_CAL_ICO();
              
                      g_tDevice.mode = E_Quick_start_mode;
              
                      g_tDevice.level = E_LEVEL_MODE;
              #endif
 333   1      
 334   1              switch (g_tDevice.level) {
 335   2              case E_LEVEL_NONE:
 336   2      
 337   2                      break;
 338   2              case E_LEVEL_MODE:
 339   2                      switch (g_tWork.mode) {
 340   3                      case E_Simple_metering_mode:
 341   3      
 342   3                              break;
 343   3                      case E_Quick_start_mode:
 344   3      
 345   3                              break;
 346   3                      case E_Coach_mode:
 347   3      
 348   3                              break;
 349   3                      }
 350   2                      break;
 351   2              case E_LEVEL_REP:
 352   2                      g_tDevice.level = E_LEVEL_MODE;
 353   2      
 354   2                      LCD_Show_ABCD('A');
 355   2                      LCD_Show_ABCD('B');
 356   2                      LCD_Show_ABCD('C');
 357   2                      LCD_Show_ABCD('D');
 358   2      
 359   2                      LCD_Show_REP_Num(0);
 360   2                      LCD_Show_Pulls_Num(0);
 361   2                      LCD_Show_CAL_Num(0);
 362   2                      LCD_Show_CAL_ICO();
 363   2      
C51 COMPILER V9.52.0.0   APP_KEY                                                           09/09/2018 09:18:08 PAGE 7   

 364   2                      break;
 365   2              case E_LEVEL_READY:
 366   2                      g_tDevice.level = E_LEVEL_REP;
 367   2                      switch (g_tWork.mode) {
 368   3                      case E_Simple_metering_mode:
 369   3                              g_tDevice.level = E_LEVEL_MODE;
 370   3                              break;
 371   3                      case E_Quick_start_mode:
 372   3      
 373   3                              break;
 374   3                      case E_Coach_mode:
 375   3      
 376   3                              break;
 377   3                      }
 378   2                      break;
 379   2              case E_LEVEL_PULL:
 380   2      
 381   2                      break;
 382   2              }
 383   1      }
 384          
 385          static void app_key_clear_long(void) {
 386   1      
 387   1              switch (g_tDevice.level) {
 388   2              case E_LEVEL_NONE:
 389   2      
 390   2                      break;
 391   2              case E_LEVEL_MODE:
 392   2      
 393   2                      break;
 394   2              case E_LEVEL_REP:
 395   2      
 396   2                      break;
 397   2              case E_LEVEL_READY:
 398   2      
 399   2                      break;
 400   2              case E_LEVEL_PULL:
 401   2                      g_tWork.reps_num = 0;
 402   2                      g_tWork.pulls_num = 0;
 403   2                      g_tWork.cal_num = 0;
 404   2                      g_tWork.sum = 0;
 405   2      
 406   2                      if (g_tDevice.mode != E_Simple_metering_mode) {
 407   3                              LCD_Show_REP_Num(g_tWork.reps_num);
 408   3                      } else {
 409   3                              LCD_Clear_REP_Num();
 410   3                      }
 411   2      
 412   2                      LCD_Show_Pulls_Num(g_tWork.pulls_num);
 413   2                      LCD_Show_CAL_Num(g_tWork.cal_num);
 414   2      
 415   2                      BEEP_Stop();
 416   2      
 417   2                      g_tDevice.level = E_LEVEL_READY;
 418   2      
 419   2                      break;
 420   2              }
 421   1      }
 422          
 423          void app_key_set(void) {
 424   1      
 425   1              switch (g_tDevice.level) {
C51 COMPILER V9.52.0.0   APP_KEY                                                           09/09/2018 09:18:08 PAGE 8   

 426   2              case E_LEVEL_NONE:
 427   2      
 428   2                      break;
 429   2              case E_LEVEL_MODE:
 430   2                      switch (g_tDevice.mode) {
 431   3                      case E_TRAINING_NONE:
 432   3      
 433   3                              break;
 434   3                      case E_Simple_metering_mode:
 435   3                              g_tDevice.mode = E_Quick_start_mode;
 436   3      
 437   3                              LCD_Show_REP_Num(0);
 438   3                              LCD_Show_REP_ICO();
 439   3                              LCD_Show_Line_up();
 440   3      
 441   3                              LCD_Show_ABCD('A');
 442   3                              LCD_Show_ABCD('B');
 443   3                              LCD_Show_ABCD('C');
 444   3                              LCD_Show_ABCD('D');
 445   3      
 446   3                              LCD_Show_CAL_ICO();
 447   3      
 448   3                              LCD_Clear_COACH_ICO();
 449   3      
 450   3                              break;
 451   3                      case E_Quick_start_mode:
 452   3                              g_tDevice.mode = E_Coach_mode;
 453   3      
 454   3                              LCD_Show_REP_Num(0);
 455   3                              LCD_Show_REP_ICO();
 456   3                              LCD_Show_Line_up();
 457   3      
 458   3                              LCD_Show_ABCD('A');
 459   3                              LCD_Show_ABCD('B');
 460   3                              LCD_Show_ABCD('C');
 461   3                              LCD_Show_ABCD('D');
 462   3      
 463   3                              LCD_Show_CAL_ICO();
 464   3      
 465   3                              LCD_Clear_COACH_ICO();
 466   3                              break;
 467   3                      case E_Coach_mode:
 468   3                              g_tDevice.mode = E_Simple_metering_mode;
 469   3      
 470   3                              LCD_Show_Line_up();
 471   3                              LCD_Clear_REP_ICO();
 472   3      
 473   3                              LCD_Clear_ABCD();
 474   3      
 475   3                              LCD_Show_CAL_ICO();
 476   3                              LCD_Clear_QS_ICO();
 477   3                              LCD_Clear_COACH_ICO();
 478   3      
 479   3                              LCD_Clear_REP_Num();
 480   3      
 481   3                              break;
 482   3                      }
 483   2                      break;
 484   2              case E_LEVEL_REP:
 485   2                      switch (g_tDevice.mode) {
 486   3                      case E_TRAINING_NONE:
 487   3      
C51 COMPILER V9.52.0.0   APP_KEY                                                           09/09/2018 09:18:08 PAGE 9   

 488   3                              break;
 489   3                      case E_Simple_metering_mode:
 490   3      
 491   3                              break;
 492   3                      case E_Quick_start_mode:
 493   3      
 494   3                              if (g_tDevice.letter == '\0') {
 495   4                                      g_tDevice.letter = 'A';
 496   4                              } else {
 497   4                                      g_tDevice.letter++;
 498   4                                      if (g_tDevice.letter > 'D') {
 499   5                                              g_tDevice.letter = 'A';
 500   5                                      }
 501   4                              }
 502   3      
 503   3                              break;
 504   3                      case E_Coach_mode:
 505   3                              if (g_tDevice.letter == '\0') {
 506   4                                      g_tDevice.letter = 'A';
 507   4                              } else {
 508   4                                      g_tDevice.letter++;
 509   4                                      if (g_tDevice.letter > 'D') {
 510   5                                              g_tDevice.letter = 'A';
 511   5                                      }
 512   4                              }
 513   3                              break;
 514   3                      }
 515   2                      break;
 516   2              case E_LEVEL_READY:
 517   2                      break;
 518   2              case E_LEVEL_PULL:
 519   2      
 520   2                      break;
 521   2              }
 522   1      }
 523          
 524          static void app_key_set_long(void) {
 525   1      
 526   1              switch (g_tDevice.level) {
 527   2              case E_LEVEL_NONE:
 528   2      
 529   2                      break;
 530   2              case E_LEVEL_MODE:
 531   2      
 532   2                      break;
 533   2              case E_LEVEL_REP:
 534   2      
 535   2                      break;
 536   2              case E_LEVEL_READY:
 537   2      
 538   2                      break;
 539   2              case E_LEVEL_PULL:
 540   2                      if (g_tDevice.mode == E_Simple_metering_mode) {
 541   3                              g_tDevice.mode = E_Quick_start_mode;
 542   3                              g_tDevice.level = E_LEVEL_MODE;
 543   3                      } else {
 544   3                              g_tDevice.mode = g_tWork.mode;
 545   3                              g_tDevice.level = E_LEVEL_REP;
 546   3                      }
 547   2      
 548   2                      g_tWork.reps_num = 0;
 549   2                      g_tWork.pulls_num = 0;
C51 COMPILER V9.52.0.0   APP_KEY                                                           09/09/2018 09:18:08 PAGE 10  

 550   2                      g_tWork.cal_num = 0;
 551   2                      g_tWork.sum = 0;
 552   2      
 553   2                      LCD_Show_REP_Num(g_tWork.reps_num);
 554   2                      LCD_Show_Pulls_Num(g_tWork.pulls_num);
 555   2                      LCD_Show_CAL_Num(g_tWork.cal_num);
 556   2      
 557   2                      LCD_Show_CAL_ICO();
 558   2                      LCD_Show_REP_ICO();
 559   2                      LCD_Show_Line_up();
 560   2      
 561   2                      LCD_Show_ABCD('A');
 562   2                      LCD_Show_ABCD('B');
 563   2                      LCD_Show_ABCD('C');
 564   2                      LCD_Show_ABCD('D');
 565   2      
 566   2                      BEEP_Stop();
 567   2                      break;
 568   2              }
 569   1      
 570   1      }
 571          
 572          void app_key_ok(void) {
 573   1      
 574   1              switch (g_tDevice.level) {
 575   2              case E_LEVEL_NONE:
 576   2      
 577   2                      break;
 578   2              case E_LEVEL_MODE:
 579   2      
 580   2                      switch (g_tDevice.mode) {
 581   3                      case E_TRAINING_NONE:
 582   3      
 583   3                              break;
 584   3                      case E_Simple_metering_mode:
 585   3                              g_tDevice.level = E_LEVEL_READY;
 586   3                              break;
 587   3                      case E_Quick_start_mode:
 588   3                              g_tDevice.level = E_LEVEL_REP;
 589   3      
 590   3                              LCD_Show_REP_ICO();
 591   3                              LCD_Show_QS_ICO();
 592   3                              LCD_Clear_COACH_ICO();
 593   3      
 594   3                              break;
 595   3                      case E_Coach_mode:
 596   3                              g_tDevice.level = E_LEVEL_REP;
 597   3      
 598   3                              LCD_Show_REP_ICO();
 599   3                              LCD_Clear_QS_ICO();
 600   3                              LCD_Show_COACH_ICO();
 601   3      
 602   3                              break;
 603   3                      }
 604   2                      g_tDevice.letter = g_tWork.reps_mode;
 605   2      
 606   2                      break;
 607   2              case E_LEVEL_REP:
 608   2                      switch (g_tDevice.mode) {
 609   3                      case E_TRAINING_NONE:
 610   3      
 611   3                              break;
C51 COMPILER V9.52.0.0   APP_KEY                                                           09/09/2018 09:18:08 PAGE 11  

 612   3                      case E_Simple_metering_mode:
 613   3      
 614   3                              break;
 615   3                      case E_Quick_start_mode:
 616   3      
 617   3                              LCD_Show_QS_ICO();
 618   3                              LCD_Clear_COACH_ICO();
 619   3      
 620   3                              break;
 621   3                      case E_Coach_mode:
 622   3                              LCD_Show_COACH_ICO();
 623   3                              LCD_Clear_QS_ICO();
 624   3      
 625   3                              break;
 626   3                      }
 627   2                      g_tWork.mode = g_tDevice.mode;
 628   2                      g_tWork.reps_mode = g_tDevice.letter;
 629   2                      g_tWork.sum = 0;
 630   2                      g_tDevice.level = E_LEVEL_READY;
 631   2      
 632   2                      LCD_Clear_ABCD();
 633   2                      LCD_Show_ABCD(g_tDevice.letter);
 634   2      
 635   2                      break;
 636   2              case E_LEVEL_READY:
 637   2      
 638   2                      break;
 639   2              case E_LEVEL_PULL:
 640   2      
 641   2                      break;
 642   2              }
 643   1      }
 644          
 645          static void app_key_ok_long(void) {
 646   1      
 647   1              switch (g_tDevice.level) {
 648   2              case E_LEVEL_NONE:
 649   2      
 650   2                      break;
 651   2              case E_LEVEL_MODE:
 652   2      
 653   2                      break;
 654   2              case E_LEVEL_REP:
 655   2      
 656   2                      break;
 657   2              case E_LEVEL_READY:
 658   2      
 659   2                      break;
 660   2              case E_LEVEL_PULL:
 661   2      
 662   2                      break;
 663   2              }
 664   1              SW_Reset();  //复位
 665   1      }
 666          
 667          void app_power_on(void) {
 668   1              SW_Reset();  //复位
 669   1      }
 670          void app_power_off(void) {
 671   1              lcd_bright_off();
 672   1              LCD_Clear_All();
 673   1      }
C51 COMPILER V9.52.0.0   APP_KEY                                                           09/09/2018 09:18:08 PAGE 12  

 674          
 675          uint8_t noOps_timeoutCnt = 0;
 676          static BIT offBight_flag = 0;
 677          
 678          void app_key_100ms_pro(void) {
 679   1              static uint8_t cnt = 0;
 680   1      
 681   1              if (g_tDevice.status == E_PowerDown) {
 682   2                      cnt++;
 683   2                      if (cnt >= 2) {
 684   3                              cnt = 0;
 685   3      
 686   3                              app_key_clear_noOps_timeoutCnt();
 687   3      //                      keyInvalid_flag = 1;
 688   3                              bsp_hallInt_close();
 689   3                              app_powerKeyInt_open();
 690   3      //                      printf("power off\n");
 691   3                              set_PD;
 692   3      
 693   3                              printf("power on\n");
 694   3                              app_power_on();
 695   3                      }
 696   2              } else {
 697   2                      cnt = 0;
 698   2              }
 699   1      }
 700          
 701          void app_key_1s_pro(void) {
 702   1      
 703   1              noOps_timeoutCnt++;
 704   1              if (noOps_timeoutCnt == 400) {
 705   2                      offBight_flag = 1;
 706   2      //              keyInvalid_flag = 1;
 707   2                      lcd_bright_off();
 708   2                      printf("off bright\n");
 709   2              } else if (noOps_timeoutCnt == 500) {
 710   2                      app_power_off();
 711   2                      printf("power off\n");
 712   2                      g_tDevice.status = E_PowerDown;
 713   2              }
 714   1      
 715   1      }
 716          void app_key_clear_noOps_timeoutCnt(void) {
 717   1              noOps_timeoutCnt = 0;
 718   1      }
 719          void app_key_pro(uint8_t keyCode) {
 720   1              static BIT key_exe_flag = 0;
 721   1      
 722   1              app_key_clear_noOps_timeoutCnt();
 723   1      
 724   1              if (offBight_flag && (g_tDevice.status == E_PowerOn)) {
 725   2                      offBight_flag = 0;
 726   2                      lcd_bright_on();
 727   2                      //      keyInvalid_flag = 1;
 728   2                      return;
 729   2              }
 730   1      
 731   1              switch (keyCode) {
 732   2              case KEY_UP_K1:
 733   2      
 734   2                      break;
 735   2              case KEY_DOWN_K1:
C51 COMPILER V9.52.0.0   APP_KEY                                                           09/09/2018 09:18:08 PAGE 13  

 736   2      
 737   2                      break;
 738   2              case KEY_LONG_K1:
 739   2                      printf("POWER long\n");
 740   2                      if (g_tDevice.status == E_PowerOn) {
 741   3                              g_tDevice.status = E_PowerDown;
 742   3                              printf("key power off\n");
 743   3                              app_power_off();
 744   3                      }
 745   2      
 746   2                      break;
 747   2              case KEY_UP_K2:
 748   2                      if (key_exe_flag) {
 749   3                              key_exe_flag = 0;
 750   3                      } else {
 751   3                              printf("CLEAR click\n");
 752   3                              app_key_clear();
 753   3                      }
 754   2      
 755   2                      break;
 756   2              case KEY_DOWN_K2:
 757   2      
 758   2                      break;
 759   2              case KEY_LONG_K2:
 760   2                      printf("CLEAR long\n");
 761   2                      key_exe_flag = 1;
 762   2                      app_key_clear_long();
 763   2      
 764   2                      break;
 765   2              case KEY_UP_K3:
 766   2                      if (key_exe_flag) {
 767   3                              key_exe_flag = 0;
 768   3                      } else {
 769   3                              printf("SET click\n");
 770   3                              app_key_set();
 771   3                      }
 772   2                      break;
 773   2              case KEY_DOWN_K3:
 774   2      
 775   2                      break;
 776   2              case KEY_LONG_K3:
 777   2                      printf("SET long\n");
 778   2                      key_exe_flag = 1;
 779   2                      app_key_set_long();
 780   2      
 781   2                      break;
 782   2              case KEY_UP_K4:
 783   2                      if (key_exe_flag) {
 784   3                              key_exe_flag = 0;
 785   3                      } else {
 786   3                              printf("OK click\n");
 787   3                              app_key_ok();
 788   3                      }
 789   2                      break;
 790   2              case KEY_DOWN_K4:
 791   2      
 792   2                      break;
 793   2              case KEY_LONG_K4:
 794   2                      printf("OK long\n");
 795   2                      key_exe_flag = 1;
 796   2                      app_key_ok_long();
 797   2      
C51 COMPILER V9.52.0.0   APP_KEY                                                           09/09/2018 09:18:08 PAGE 14  

 798   2                      break;
 799   2      #if DEBUG_KEY
                              case KEY_UP_K5:
              
                              break;
                              case KEY_DOWN_K5:
                              //BEEP_KeyTone();
                              query_work_sum();
                              break;
                              case KEY_LONG_K5:
              
                              break;
              #endif
 811   2              case KEY_UP_K1K3:
 812   2      
 813   2                      break;
 814   2              case KEY_DOWN_K1K3:
 815   2      
 816   2                      break;
 817   2              case KEY_LONG_K1K3:
 818   2      
 819   2                      break;
 820   2              default:
 821   2      //              BEEP_KeyTone();
 822   2                      break;
 823   2      
 824   2              }
 825   1      }
 826          


MODULE INFORMATION:   STATIC OVERLAYABLE
   CODE SIZE        =   1619    ----
   CONSTANT SIZE    =    125    ----
   XDATA SIZE       =      6       1
   PDATA SIZE       =   ----    ----
   DATA SIZE        =   ----    ----
   IDATA SIZE       =   ----    ----
   BIT SIZE         =      2    ----
END OF MODULE INFORMATION.


C51 COMPILATION COMPLETE.  0 WARNING(S),  0 ERROR(S)
