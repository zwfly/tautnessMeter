C51 COMPILER V9.56.0.0   APP_KEY                                                           09/20/2017 23:38:00 PAGE 1   


C51 COMPILER V9.56.0.0, COMPILATION OF MODULE APP_KEY
OBJECT MODULE PLACED IN .\Out\Objects\app_key.obj
COMPILER INVOKED BY: C:\Keil_v5\C51\BIN\C51.EXE ..\App\src\app_key.c LARGE OPTIMIZE(8,SPEED) BROWSE INCDIR(..\Common\inc
                    -;..\App\inc;..\Bsp\inc;..\Startup;..\Bsp) DEFINE(FOSC_110592) DEBUG OBJECTEXTEND PRINT(.\Out\Listings\app_key.lst) OBJEC
                    -T(.\Out\Objects\app_key.obj)

line level    source

   1          /*
   2           * app_key.c
   3           *
   4           *  Created on: 2017年7月7日
   5           *      Author: admin
   6           */
   7          
   8          #include "app.h"
   9          
  10          DEVICE_T g_tDevice;
  11          
  12          #define BLINK_FLASH_TIME   4
  13          
  14          /*
  15           * level: 0, 拉动时候的界面
  16           *        1,
  17           * */
  18          //uint8_t level = 0;
  19          static void app_UI_init(void);
  20          
  21          void app_key_init(void) {
  22   1      
  23   1              app_powerKeyInt_close();
  24   1              bsp_hallInt_open();
  25   1      
  26   1      //      g_tWork.mode = E_TRAINING_NONE;
  27   1      
  28   1              g_tDevice.mode = E_Simple_metering_mode;
  29   1              g_tDevice.status = E_PowerOn;
  30   1              g_tDevice.level = E_LEVEL_PULL;
  31   1              g_tDevice.letter = 'A';
  32   1      
  33   1              app_UI_init();
  34   1      }
  35          void app_powerKeyInt_open(void) {
  36   1              clr_PIPS2;
  37   1              clr_PIPS1;
  38   1              clr_PIPS0;
  39   1      
  40   1              set_PIT6;
  41   1              set_PINEN6;
  42   1              clr_PIPEN6;
  43   1      
  44   1      }
  45          void app_powerKeyInt_close(void) {
  46   1              clr_PIPS2;
  47   1              clr_PIPS1;
  48   1              clr_PIPS0;
  49   1      
  50   1              clr_PIT6;
  51   1              clr_PINEN6;
  52   1              clr_PIPEN6;
  53   1      }
C51 COMPILER V9.56.0.0   APP_KEY                                                           09/20/2017 23:38:00 PAGE 2   

  54          static void app_UI_init(void) {
  55   1              switch (g_tDevice.mode) {
  56   2              case E_TRAINING_NONE:
  57   2      
  58   2                      break;
  59   2              case E_Simple_metering_mode:
  60   2      
  61   2                      LCD_Clear_REP_Num();
  62   2                      LCD_Show_Pulls_Num(0);
  63   2                      LCD_Show_CAL_Num(0);
  64   2      
  65   2                      LCD_Show_Line_up();
  66   2                      LCD_Clear_REP_ICO();
  67   2      
  68   2                      LCD_Clear_ABCD();
  69   2      
  70   2                      LCD_Show_CAL_ICO();
  71   2                      LCD_Clear_QS_ICO();
  72   2                      LCD_Clear_COACH_ICO();
  73   2      
  74   2      //              Repeat_Stop();
  75   2                      break;
  76   2              case E_Quick_start_mode:
  77   2      
  78   2                      LCD_Show_REP_ICO();
  79   2                      LCD_Show_Line_up();
  80   2      
  81   2                      LCD_Show_ABCD('A');
  82   2                      LCD_Show_ABCD('B');
  83   2                      LCD_Show_ABCD('C');
  84   2                      LCD_Show_ABCD('D');
  85   2      
  86   2                      LCD_Show_CAL_ICO();
  87   2      
  88   2                      LCD_Clear_COACH_ICO();
  89   2      
  90   2      //              Repeat_Stop();
  91   2      //              Repeat_SetStart(LCD_Show_QS_ICO);
  92   2      //              Repeat_SetStop(LCD_Clear_QS_ICO);
  93   2      //              Repeat_Start(4, 4, 0);
  94   2                      break;
  95   2              case E_Coach_mode:
  96   2                      LCD_Show_REP_ICO();
  97   2                      LCD_Show_Line_up();
  98   2      
  99   2                      LCD_Show_ABCD('A');
 100   2                      LCD_Show_ABCD('B');
 101   2                      LCD_Show_ABCD('C');
 102   2                      LCD_Show_ABCD('D');
 103   2      
 104   2                      LCD_Show_CAL_ICO();
 105   2      
 106   2                      LCD_Clear_QS_ICO();
 107   2      
 108   2      //              Repeat_Stop();
 109   2      //              Repeat_SetStart(LCD_Show_COACH_ICO);
 110   2      //              Repeat_SetStop(LCD_Clear_COACH_ICO);
 111   2      //              Repeat_Start(4, 4, 0);
 112   2                      break;
 113   2              }
 114   1      }
 115          
C51 COMPILER V9.56.0.0   APP_KEY                                                           09/20/2017 23:38:00 PAGE 3   

 116          void app_flash_Show(void) {
 117   1      
 118   1              LCD_Show_Line_up();
 119   1              switch (g_tDevice.level) {
 120   2              case E_LEVEL_NONE:
 121   2      
 122   2                      break;
 123   2              case E_LEVEL_MODE:
 124   2      
 125   2                      switch (g_tDevice.mode) {
 126   3                      case E_TRAINING_NONE:
 127   3                              break;
 128   3                      case E_Simple_metering_mode:
 129   3      
 130   3                              break;
 131   3                      case E_Quick_start_mode:
 132   3                              LCD_Show_QS_ICO();
 133   3                              break;
 134   3                      case E_Coach_mode:
 135   3                              LCD_Show_COACH_ICO();
 136   3                              break;
 137   3                      }
 138   2      
 139   2                      break;
 140   2              case E_LEVEL_REP:
 141   2      
 142   2                      switch (g_tDevice.letter) {
 143   3                      case '\0':
 144   3                              g_tDevice.letter = 'A';
 145   3                              break;
 146   3                      case 'A':
 147   3                              LCD_Show_REP_Num(Rep_Pull_num['A' - 'A'][0]);
 148   3                              LCD_Show_Pulls_Num(Rep_Pull_num['A' - 'A'][1]);
 149   3                              break;
 150   3                      case 'B':
 151   3                              LCD_Show_REP_Num(Rep_Pull_num['B' - 'A'][0]);
 152   3                              LCD_Show_Pulls_Num(Rep_Pull_num['B' - 'A'][1]);
 153   3                              break;
 154   3                      case 'C':
 155   3                              LCD_Show_REP_Num(Rep_Pull_num['C' - 'A'][0]);
 156   3                              LCD_Show_Pulls_Num(Rep_Pull_num['C' - 'A'][1]);
 157   3                              break;
 158   3                      case 'D':
 159   3                              LCD_Show_REP_Num(Rep_Pull_num['D' - 'A'][0]);
 160   3                              LCD_Show_Pulls_Num(Rep_Pull_num['D' - 'A'][1]);
 161   3                              break;
 162   3                      default:
 163   3                              g_tDevice.letter = 'A';
 164   3                              break;
 165   3                      }
 166   2                      if (g_tDevice.mode == E_Quick_start_mode) {
 167   3                              LCD_Show_QS_ICO();
 168   3                      } else if (g_tDevice.mode == E_Coach_mode) {
 169   3                              LCD_Show_COACH_ICO();
 170   3                      }
 171   2                      LCD_Show_ABCD_all();
 172   2      
 173   2                      break;
 174   2              case E_LEVEL_READY:
 175   2      
 176   2                      break;
 177   2              case E_LEVEL_PULL:
C51 COMPILER V9.56.0.0   APP_KEY                                                           09/20/2017 23:38:00 PAGE 4   

 178   2      
 179   2                      break;
 180   2              }
 181   1              LCD_Show_Line_up();
 182   1      }
 183          void app_flash_Clear(void) {
 184   1      
 185   1              switch (g_tDevice.level) {
 186   2              case E_LEVEL_NONE:
 187   2                      break;
 188   2              case E_LEVEL_MODE:
 189   2      
 190   2                      LCD_Clear_QS_ICO();
 191   2                      LCD_Clear_COACH_ICO();
 192   2                      break;
 193   2              case E_LEVEL_REP:
 194   2      
 195   2                      if (g_tDevice.letter == '\0') {
 196   3                              LCD_Clear_ABCD();
 197   3                      }
 198   2                      if (g_tDevice.letter == 'A') {
 199   3                              LCD_Clear_ABCD();
 200   3                              LCD_Show_ABCD('A');
 201   3                      }
 202   2                      if (g_tDevice.letter == 'B') {
 203   3                              LCD_Clear_ABCD();
 204   3                              LCD_Show_ABCD('B');
 205   3                      }
 206   2                      if (g_tDevice.letter == 'C') {
 207   3                              LCD_Clear_ABCD();
 208   3                              LCD_Show_ABCD('C');
 209   3                      }
 210   2                      if (g_tDevice.letter == 'D') {
 211   3                              LCD_Clear_ABCD();
 212   3                              LCD_Show_ABCD('D');
 213   3                      }
 214   2                      if (g_tDevice.mode == E_Quick_start_mode) {
 215   3                              LCD_Clear_QS_ICO();
 216   3                      } else if (g_tDevice.mode == E_Coach_mode) {
 217   3                              LCD_Clear_COACH_ICO();
 218   3                      }
 219   2                      break;
 220   2              case E_LEVEL_READY:
 221   2                      break;
 222   2              case E_LEVEL_PULL:
 223   2      
 224   2                      break;
 225   2              }
 226   1      
 227   1      }
 228          void app_key_power_or_return(void) {
 229   1      
 230   1              switch (g_tDevice.level) {
 231   2              case E_LEVEL_NONE:
 232   2      
 233   2                      break;
 234   2              case E_LEVEL_MODE:
 235   2      //              Repeat_Stop();
 236   2      
 237   2                      break;
 238   2              case E_LEVEL_REP:
 239   2      
C51 COMPILER V9.56.0.0   APP_KEY                                                           09/20/2017 23:38:00 PAGE 5   

 240   2                      g_tDevice.level = E_LEVEL_MODE;
 241   2      
 242   2                      break;
 243   2              case E_LEVEL_READY:
 244   2      
 245   2                      g_tDevice.level = E_LEVEL_REP;
 246   2      
 247   2                      break;
 248   2              case E_LEVEL_PULL:
 249   2      
 250   2      #if 1
 251   2                      g_tWork.sum = 0;
 252   2                      g_tWork.cal_num = 0;
 253   2      
 254   2                      app_UI_init();
 255   2      
 256   2                      LCD_Show_Pulls_Num(g_tWork.sum);
 257   2                      LCD_Show_CAL_Num(g_tWork.cal_num);
 258   2      
 259   2                      switch (g_tDevice.mode) {
 260   3                      case E_TRAINING_NONE:
 261   3      
 262   3                              break;
 263   3                      case E_Simple_metering_mode:
 264   3      
 265   3                              LCD_Show_Line_up();
 266   3                              LCD_Clear_REP_ICO();
 267   3      
 268   3                              LCD_Clear_REP_Num();
 269   3      
 270   3                              LCD_Clear_ABCD();
 271   3      
 272   3                              LCD_Show_CAL_ICO();
 273   3                              LCD_Clear_QS_ICO();
 274   3                              LCD_Clear_COACH_ICO();
 275   3      
 276   3                              break;
 277   3                      case E_Quick_start_mode:
 278   3      
 279   3                              LCD_Show_Line_up();
 280   3                              LCD_Show_REP_ICO();
 281   3                              LCD_Show_REP_Num(0);
 282   3                              LCD_Show_ABCD(g_tWork.reps_mode);
 283   3      
 284   3                              LCD_Show_CAL_ICO();
 285   3                              LCD_Show_QS_ICO();
 286   3                              LCD_Clear_COACH_ICO();
 287   3                              break;
 288   3                      case E_Coach_mode:
 289   3      
 290   3                              LCD_Show_Line_up();
 291   3                              LCD_Show_REP_ICO();
 292   3                              LCD_Show_REP_Num(0);
 293   3                              LCD_Show_ABCD(g_tWork.reps_mode);
 294   3      
 295   3                              LCD_Show_CAL_ICO();
 296   3                              LCD_Clear_QS_ICO();
 297   3                              LCD_Show_COACH_ICO();
 298   3      
 299   3                              break;
 300   3                      }
 301   2      #endif
C51 COMPILER V9.56.0.0   APP_KEY                                                           09/20/2017 23:38:00 PAGE 6   

 302   2      
 303   2                      break;
 304   2              }
 305   1      
 306   1      }
 307          void app_key_set(void) {
 308   1      
 309   1              LCD_Show_REP_Num(0);
 310   1              LCD_Show_Pulls_Num(0);
 311   1              LCD_Show_CAL_Num(0);
 312   1      
 313   1              LCD_Show_Line_up();
 314   1              LCD_Show_REP_ICO();
 315   1      
 316   1              LCD_Show_ABCD_all();
 317   1      
 318   1              LCD_Show_CAL_ICO();
 319   1      
 320   1              g_tDevice.mode = E_Quick_start_mode;
 321   1      
 322   1      //      g_tDevice.mode = E_Quick_start_mode;
 323   1      //      g_tDevice.level = 1;
 324   1      
 325   1              g_tDevice.level = E_LEVEL_MODE;
 326   1              Repeat_Stop();
 327   1              Repeat_SetStart(app_flash_Show);
 328   1              Repeat_SetStop(app_flash_Clear);
 329   1              Repeat_Start(BLINK_FLASH_TIME, BLINK_FLASH_TIME, 0);
 330   1      
 331   1              switch (g_tDevice.level) {
 332   2              case E_LEVEL_NONE:
 333   2      
 334   2                      break;
 335   2              case E_LEVEL_MODE:
 336   2                      switch (g_tWork.mode) {
 337   3                      case E_Simple_metering_mode:
 338   3      
 339   3                              break;
 340   3                      case E_Quick_start_mode:
 341   3      
 342   3                              break;
 343   3                      case E_Coach_mode:
 344   3      
 345   3                              break;
 346   3                      }
 347   2                      break;
 348   2              case E_LEVEL_REP:
 349   2      
 350   2                      break;
 351   2              case E_LEVEL_READY:
 352   2      
 353   2                      break;
 354   2              case E_LEVEL_PULL:
 355   2      
 356   2                      break;
 357   2              }
 358   1      
 359   1              app_UI_init();
 360   1      }
 361          
 362          void app_key_add(void) {
 363   1      
C51 COMPILER V9.56.0.0   APP_KEY                                                           09/20/2017 23:38:00 PAGE 7   

 364   1              switch (g_tDevice.level) {
 365   2              case E_LEVEL_NONE:
 366   2      
 367   2                      break;
 368   2              case E_LEVEL_MODE:
 369   2                      switch (g_tDevice.mode) {
 370   3                      case E_TRAINING_NONE:
 371   3      
 372   3                              break;
 373   3                      case E_Simple_metering_mode:
 374   3                              g_tDevice.mode = E_Quick_start_mode;
 375   3      
 376   3                              break;
 377   3                      case E_Quick_start_mode:
 378   3                              g_tDevice.mode = E_Coach_mode;
 379   3      
 380   3                              break;
 381   3                      case E_Coach_mode:
 382   3                              g_tDevice.mode = E_Simple_metering_mode;
 383   3      
 384   3                              break;
 385   3                      }
 386   2                      break;
 387   2              case E_LEVEL_REP:
 388   2                      switch (g_tDevice.mode) {
 389   3                      case E_TRAINING_NONE:
 390   3      
 391   3                              break;
 392   3                      case E_Simple_metering_mode:
 393   3      
 394   3                              break;
 395   3                      case E_Quick_start_mode:
 396   3      
 397   3                              if (g_tDevice.letter == '\0') {
 398   4                                      g_tDevice.letter = 'A';
 399   4                              } else {
 400   4                                      g_tDevice.letter++;
 401   4                                      if (g_tDevice.letter > 'D') {
 402   5                                              g_tDevice.letter = 'A';
 403   5                                      }
 404   4                              }
 405   3      
 406   3                              break;
 407   3                      case E_Coach_mode:
 408   3                              if (g_tDevice.letter == '\0') {
 409   4                                      g_tDevice.letter = 'A';
 410   4                              } else {
 411   4                                      g_tDevice.letter++;
 412   4                                      if (g_tDevice.letter > 'D') {
 413   5                                              g_tDevice.letter = 'A';
 414   5                                      }
 415   4                              }
 416   3                              break;
 417   3                      }
 418   2                      break;
 419   2              case E_LEVEL_READY:
 420   2                      break;
 421   2              case E_LEVEL_PULL:
 422   2      
 423   2                      break;
 424   2              }
 425   1              app_UI_init();
C51 COMPILER V9.56.0.0   APP_KEY                                                           09/20/2017 23:38:00 PAGE 8   

 426   1      }
 427          
 428          void app_key_ok(void) {
 429   1      
 430   1              switch (g_tDevice.level) {
 431   2              case E_LEVEL_NONE:
 432   2      
 433   2                      break;
 434   2              case E_LEVEL_MODE:
 435   2      
 436   2                      switch (g_tDevice.mode) {
 437   3                      case E_TRAINING_NONE:
 438   3      
 439   3                              break;
 440   3                      case E_Simple_metering_mode:
 441   3                              g_tDevice.level = E_LEVEL_READY;
 442   3                              break;
 443   3                      case E_Quick_start_mode:
 444   3                              g_tDevice.level = E_LEVEL_REP;
 445   3      
 446   3                              LCD_Show_QS_ICO();
 447   3                              LCD_Clear_COACH_ICO();
 448   3      
 449   3      //                      Repeat_Stop();
 450   3      //                      Repeat_SetStart(app_flash_Show);
 451   3      //                      Repeat_SetStop(app_flash_Clear);
 452   3      //                      Repeat_Start(BLINK_FLASH_TIME, BLINK_FLASH_TIME, 0);
 453   3      
 454   3                              break;
 455   3                      case E_Coach_mode:
 456   3                              g_tDevice.level = E_LEVEL_REP;
 457   3                              LCD_Clear_QS_ICO();
 458   3                              LCD_Show_COACH_ICO();
 459   3      
 460   3      //                      Repeat_Stop();
 461   3      //                      Repeat_SetStart(app_flash_Show);
 462   3      //                      Repeat_SetStop(app_flash_Clear);
 463   3      //                      Repeat_Start(BLINK_FLASH_TIME, BLINK_FLASH_TIME, 0);
 464   3                              break;
 465   3                      }
 466   2                      g_tDevice.letter = g_tWork.reps_mode;
 467   2      
 468   2                      break;
 469   2              case E_LEVEL_REP:
 470   2                      switch (g_tDevice.mode) {
 471   3                      case E_TRAINING_NONE:
 472   3      
 473   3                              break;
 474   3                      case E_Simple_metering_mode:
 475   3      
 476   3                              break;
 477   3                      case E_Quick_start_mode:
 478   3      
 479   3      //                      Repeat_Stop();
 480   3                              LCD_Show_QS_ICO();
 481   3                              LCD_Clear_COACH_ICO();
 482   3      
 483   3                              break;
 484   3                      case E_Coach_mode:
 485   3      //                      Repeat_Stop();
 486   3                              LCD_Show_COACH_ICO();
 487   3                              LCD_Clear_QS_ICO();
C51 COMPILER V9.56.0.0   APP_KEY                                                           09/20/2017 23:38:00 PAGE 9   

 488   3      
 489   3                              break;
 490   3                      }
 491   2                      g_tWork.mode = g_tDevice.mode;
 492   2                      g_tWork.reps_mode = g_tDevice.letter;
 493   2                      g_tWork.sum = 0;
 494   2                      g_tDevice.level = E_LEVEL_READY;
 495   2                      break;
 496   2              case E_LEVEL_READY:
 497   2      
 498   2                      break;
 499   2              case E_LEVEL_PULL:
 500   2      
 501   2                      break;
 502   2              }
 503   1      //      app_UI_init();
 504   1      }
 505          
 506          void app_power_on(void) {
 507   1              SW_Reset();  //复位
 508   1      }
 509          void app_power_off(void) {
 510   1              lcd_bright_off();
 511   1              LCD_Clear_All();
 512   1      }
 513          
 514          uint8_t noOps_timeoutCnt = 0;
 515          static BIT offBight_flag = 0;
 516          
 517          void app_key_100ms_pro(void) {
 518   1              static uint8_t cnt = 0;
 519   1      
 520   1              if (g_tDevice.status == E_PowerDown) {
 521   2                      cnt++;
 522   2                      if (cnt >= 3) {
 523   3                              cnt = 0;
 524   3      
 525   3                              app_key_clear_noOps_timeoutCnt();
 526   3      //                      keyInvalid_flag = 1;
 527   3                              bsp_hallInt_close();
 528   3                              app_powerKeyInt_open();
 529   3                              set_PD;
 530   3                      }
 531   2              } else {
 532   2                      cnt = 0;
 533   2              }
 534   1      }
 535          
 536          void app_key_1s_pro(void) {
 537   1      
 538   1              noOps_timeoutCnt++;
 539   1              if (noOps_timeoutCnt == 40) {
 540   2                      offBight_flag = 1;
 541   2      //              keyInvalid_flag = 1;
 542   2                      lcd_bright_off();
 543   2                      printf("off bright\n");
 544   2              } else if (noOps_timeoutCnt == 50) {
 545   2                      app_power_off();
 546   2                      printf("power off\n");
 547   2                      g_tDevice.status = E_PowerDown;
 548   2              }
 549   1      
C51 COMPILER V9.56.0.0   APP_KEY                                                           09/20/2017 23:38:00 PAGE 10  

 550   1      }
 551          void app_key_clear_noOps_timeoutCnt(void) {
 552   1              noOps_timeoutCnt = 0;
 553   1      }
 554          void app_key_pro(uint8_t keyCode) {
 555   1      
 556   1              app_key_clear_noOps_timeoutCnt();
 557   1      
 558   1              if (offBight_flag && (g_tDevice.status == E_PowerOn)) {
 559   2                      offBight_flag = 0;
 560   2                      lcd_bright_on();
 561   2                      //      keyInvalid_flag = 1;
 562   2                      return;
 563   2              }
 564   1      
 565   1              switch (keyCode) {
 566   2              case KEY_UP_K1:
 567   2      #if 0
                              if (g_tDevice.status == E_PowerReady) {
                                      app_power_off();
                                      printf("power off\n");
                                      g_tDevice.status = E_PowerDown;
                              }
              #endif
 574   2                      break;
 575   2              case KEY_DOWN_K1:
 576   2                      BEEP_KeyTone();
 577   2                      if (g_tDevice.status == E_PowerOn) {
 578   3                              app_key_power_or_return();
 579   3                      } else if (g_tDevice.status == E_PowerDown) {
 580   3                              g_tDevice.status = E_PowerOn;
 581   3                              app_power_on();
 582   3                      }
 583   2                      break;
 584   2              case KEY_LONG_K1:
 585   2                      BEEP_KeyTone();
 586   2                      if (g_tDevice.status == E_PowerOn) {
 587   3                              g_tDevice.status = E_PowerDown;
 588   3                              app_power_off();
 589   3                      } else if (g_tDevice.status == E_PowerReady) {
 590   3                              g_tDevice.status = E_PowerOn;
 591   3                              app_power_on();
 592   3                      }
 593   2      
 594   2                      break;
 595   2              case KEY_UP_K2:
 596   2      
 597   2                      break;
 598   2              case KEY_DOWN_K2:
 599   2                      BEEP_KeyTone();
 600   2                      app_key_set();
 601   2                      break;
 602   2              case KEY_LONG_K2:
 603   2      
 604   2                      break;
 605   2              case KEY_UP_K3:
 606   2      
 607   2                      break;
 608   2              case KEY_DOWN_K3:
 609   2                      BEEP_KeyTone();
 610   2                      app_key_add();
 611   2                      break;
C51 COMPILER V9.56.0.0   APP_KEY                                                           09/20/2017 23:38:00 PAGE 11  

 612   2              case KEY_LONG_K3:
 613   2      
 614   2                      break;
 615   2              case KEY_UP_K4:
 616   2      
 617   2                      break;
 618   2              case KEY_DOWN_K4:
 619   2                      BEEP_KeyTone();
 620   2                      app_key_ok();
 621   2                      break;
 622   2              case KEY_LONG_K4:
 623   2      
 624   2                      break;
 625   2      #if DEBUG_KEY
                              case KEY_UP_K5:
              
                              break;
                              case KEY_DOWN_K5:
                              //BEEP_KeyTone();
                              query_work_sum();
                              break;
                              case KEY_LONG_K5:
              
                              break;
              #endif
 637   2              case KEY_UP_K1K3:
 638   2      
 639   2                      break;
 640   2              case KEY_DOWN_K1K3:
 641   2      
 642   2                      break;
 643   2              case KEY_LONG_K1K3:
 644   2      
 645   2                      break;
 646   2              default:
 647   2      //              BEEP_KeyTone();
 648   2                      break;
 649   2      
 650   2              }
 651   1      }
 652          


MODULE INFORMATION:   STATIC OVERLAYABLE
   CODE SIZE        =   1152    ----
   CONSTANT SIZE    =     23    ----
   XDATA SIZE       =      6       1
   PDATA SIZE       =   ----    ----
   DATA SIZE        =   ----    ----
   IDATA SIZE       =   ----    ----
   BIT SIZE         =      1    ----
END OF MODULE INFORMATION.


C51 COMPILATION COMPLETE.  0 WARNING(S),  0 ERROR(S)
