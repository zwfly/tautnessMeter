C51 COMPILER V9.56.0.0   APP_KEY                                                           09/22/2017 22:48:12 PAGE 1   


C51 COMPILER V9.56.0.0, COMPILATION OF MODULE APP_KEY
OBJECT MODULE PLACED IN .\Out\Objects\app_key.obj
COMPILER INVOKED BY: C:\Keil_v5\C51\BIN\C51.EXE ..\App\src\app_key.c LARGE OPTIMIZE(8,SPEED) BROWSE INCDIR(..\Common\inc
                    -;..\App\inc;..\Bsp\inc;..\Startup;..\Bsp) DEFINE(FOSC_110592) DEBUG OBJECTEXTEND PRINT(.\Out\Listings\app_key.lst) OBJEC
                    -T(.\Out\Objects\app_key.obj)

line level    source

   1          /*
   2           * app_key.c
   3           *
   4           *  Created on: 2017年7月7日
   5           *      Author: admin
   6           */
   7          
   8          #include "app.h"
   9          
  10          DEVICE_T g_tDevice;
  11          
  12          #define BLINK_FLASH_TIME   4
  13          
  14          /*
  15           * level: 0, 拉动时候的界面
  16           *        1,
  17           * */
  18          //uint8_t level = 0;
  19          static void app_UI_init(void);
  20          void app_flash_Clear(void);
  21          void app_flash_Show(void);
  22          
  23          void app_key_init(void) {
  24   1      
  25   1              app_powerKeyInt_close();
  26   1              bsp_hallInt_open();
  27   1      
  28   1      //      g_tWork.mode = E_TRAINING_NONE;
  29   1      
  30   1              g_tDevice.mode = E_Simple_metering_mode;
  31   1              g_tDevice.status = E_PowerOn;
  32   1              g_tDevice.level = E_LEVEL_PULL;
  33   1              g_tDevice.letter = 'A';
  34   1      
  35   1              app_UI_init();
  36   1      
  37   1              Repeat_Stop();
  38   1              Repeat_SetStart(app_flash_Show);
  39   1              Repeat_SetStop(app_flash_Clear);
  40   1              Repeat_Start(BLINK_FLASH_TIME, BLINK_FLASH_TIME, 0);
  41   1      }
  42          void app_powerKeyInt_open(void) {
  43   1              clr_PIPS2;
  44   1              clr_PIPS1;
  45   1              clr_PIPS0;
  46   1      
  47   1              set_PIT6;
  48   1              set_PINEN6;
  49   1              clr_PIPEN6;
  50   1      
  51   1      }
  52          void app_powerKeyInt_close(void) {
  53   1              clr_PIPS2;
C51 COMPILER V9.56.0.0   APP_KEY                                                           09/22/2017 22:48:12 PAGE 2   

  54   1              clr_PIPS1;
  55   1              clr_PIPS0;
  56   1      
  57   1              clr_PIT6;
  58   1              clr_PINEN6;
  59   1              clr_PIPEN6;
  60   1      }
  61          
  62          static void app_UI_init(void) {
  63   1              switch (g_tDevice.mode) {
  64   2              case E_TRAINING_NONE:
  65   2      
  66   2                      break;
  67   2              case E_Simple_metering_mode:
  68   2      
  69   2                      LCD_Clear_REP_Num();
  70   2                      LCD_Show_Pulls_Num(0);
  71   2                      LCD_Show_CAL_Num(0);
  72   2      
  73   2                      LCD_Show_Line_up();
  74   2                      LCD_Clear_REP_ICO();
  75   2      
  76   2                      LCD_Clear_ABCD();
  77   2      
  78   2                      LCD_Show_CAL_ICO();
  79   2                      LCD_Clear_QS_ICO();
  80   2                      LCD_Clear_COACH_ICO();
  81   2      
  82   2                      break;
  83   2              case E_Quick_start_mode:
  84   2      
  85   2                      LCD_Show_REP_ICO();
  86   2                      LCD_Show_Line_up();
  87   2      
  88   2                      LCD_Show_ABCD('A');
  89   2                      LCD_Show_ABCD('B');
  90   2                      LCD_Show_ABCD('C');
  91   2                      LCD_Show_ABCD('D');
  92   2      
  93   2                      LCD_Show_CAL_ICO();
  94   2      
  95   2                      LCD_Clear_COACH_ICO();
  96   2      
  97   2                      break;
  98   2              case E_Coach_mode:
  99   2                      LCD_Show_REP_ICO();
 100   2                      LCD_Show_Line_up();
 101   2      
 102   2                      LCD_Show_ABCD('A');
 103   2                      LCD_Show_ABCD('B');
 104   2                      LCD_Show_ABCD('C');
 105   2                      LCD_Show_ABCD('D');
 106   2      
 107   2                      LCD_Show_CAL_ICO();
 108   2      
 109   2                      LCD_Clear_QS_ICO();
 110   2      
 111   2                      break;
 112   2              }
 113   1      }
 114          
 115          void app_flash_Show(void) {
C51 COMPILER V9.56.0.0   APP_KEY                                                           09/22/2017 22:48:12 PAGE 3   

 116   1      
 117   1              LCD_Show_Line_up();
 118   1              switch (g_tDevice.level) {
 119   2              case E_LEVEL_NONE:
 120   2      
 121   2                      break;
 122   2              case E_LEVEL_MODE:
 123   2      
 124   2                      switch (g_tDevice.mode) {
 125   3                      case E_TRAINING_NONE:
 126   3                              break;
 127   3                      case E_Simple_metering_mode:
 128   3      
 129   3                              break;
 130   3                      case E_Quick_start_mode:
 131   3                              LCD_Show_QS_ICO();
 132   3                              break;
 133   3                      case E_Coach_mode:
 134   3                              LCD_Show_COACH_ICO();
 135   3                              break;
 136   3                      }
 137   2      
 138   2                      break;
 139   2              case E_LEVEL_REP:
 140   2      
 141   2                      switch (g_tDevice.letter) {
 142   3                      case '\0':
 143   3                              g_tDevice.letter = 'A';
 144   3                              break;
 145   3                      case 'A':
 146   3                              LCD_Show_REP_Num(Rep_Pull_num['A' - 'A'][0]);
 147   3                              LCD_Show_Pulls_Num(Rep_Pull_num['A' - 'A'][1]);
 148   3                              break;
 149   3                      case 'B':
 150   3                              LCD_Show_REP_Num(Rep_Pull_num['B' - 'A'][0]);
 151   3                              LCD_Show_Pulls_Num(Rep_Pull_num['B' - 'A'][1]);
 152   3                              break;
 153   3                      case 'C':
 154   3                              LCD_Show_REP_Num(Rep_Pull_num['C' - 'A'][0]);
 155   3                              LCD_Show_Pulls_Num(Rep_Pull_num['C' - 'A'][1]);
 156   3                              break;
 157   3                      case 'D':
 158   3                              LCD_Show_REP_Num(Rep_Pull_num['D' - 'A'][0]);
 159   3                              LCD_Show_Pulls_Num(Rep_Pull_num['D' - 'A'][1]);
 160   3                              break;
 161   3                      default:
 162   3                              g_tDevice.letter = 'A';
 163   3                              break;
 164   3                      }
 165   2                      if (g_tDevice.mode == E_Quick_start_mode) {
 166   3                              LCD_Show_QS_ICO();
 167   3                      } else if (g_tDevice.mode == E_Coach_mode) {
 168   3                              LCD_Show_COACH_ICO();
 169   3                      }
 170   2                      LCD_Show_ABCD_all();
 171   2      
 172   2                      break;
 173   2              case E_LEVEL_READY:
 174   2      
 175   2                      break;
 176   2              case E_LEVEL_PULL:
 177   2      
C51 COMPILER V9.56.0.0   APP_KEY                                                           09/22/2017 22:48:12 PAGE 4   

 178   2                      break;
 179   2              }
 180   1              LCD_Show_Line_up();
 181   1      }
 182          void app_flash_Clear(void) {
 183   1      
 184   1              switch (g_tDevice.level) {
 185   2              case E_LEVEL_NONE:
 186   2                      break;
 187   2              case E_LEVEL_MODE:
 188   2      
 189   2                      LCD_Clear_QS_ICO();
 190   2                      LCD_Clear_COACH_ICO();
 191   2                      break;
 192   2              case E_LEVEL_REP:
 193   2      
 194   2                      if (g_tDevice.letter == '\0') {
 195   3                              LCD_Clear_ABCD();
 196   3                      }
 197   2                      if (g_tDevice.letter == 'A') {
 198   3                              LCD_Clear_ABCD();
 199   3                              LCD_Show_ABCD('A');
 200   3                      }
 201   2                      if (g_tDevice.letter == 'B') {
 202   3                              LCD_Clear_ABCD();
 203   3                              LCD_Show_ABCD('B');
 204   3                      }
 205   2                      if (g_tDevice.letter == 'C') {
 206   3                              LCD_Clear_ABCD();
 207   3                              LCD_Show_ABCD('C');
 208   3                      }
 209   2                      if (g_tDevice.letter == 'D') {
 210   3                              LCD_Clear_ABCD();
 211   3                              LCD_Show_ABCD('D');
 212   3                      }
 213   2                      if (g_tDevice.mode == E_Quick_start_mode) {
 214   3                              LCD_Clear_QS_ICO();
 215   3                      } else if (g_tDevice.mode == E_Coach_mode) {
 216   3                              LCD_Clear_COACH_ICO();
 217   3                      }
 218   2                      break;
 219   2              case E_LEVEL_READY:
 220   2                      break;
 221   2              case E_LEVEL_PULL:
 222   2      
 223   2                      break;
 224   2              }
 225   1      
 226   1      }
 227          void app_key_power(void) {
 228   1      
 229   1              switch (g_tDevice.level) {
 230   2              case E_LEVEL_NONE:
 231   2      
 232   2                      break;
 233   2              case E_LEVEL_MODE:
 234   2      
 235   2                      break;
 236   2              case E_LEVEL_REP:
 237   2      
 238   2                      LCD_Show_ABCD('A');
 239   2                      LCD_Show_ABCD('B');
C51 COMPILER V9.56.0.0   APP_KEY                                                           09/22/2017 22:48:12 PAGE 5   

 240   2                      LCD_Show_ABCD('C');
 241   2                      LCD_Show_ABCD('D');
 242   2      
 243   2                      LCD_Show_REP_Num(0);
 244   2                      LCD_Show_Pulls_Num(0);
 245   2                      LCD_Show_CAL_Num(0);
 246   2                      LCD_Show_CAL_ICO();
 247   2      
 248   2                      g_tDevice.level = E_LEVEL_MODE;
 249   2      
 250   2                      break;
 251   2              case E_LEVEL_READY:
 252   2      
 253   2                      g_tDevice.level = E_LEVEL_REP;
 254   2      
 255   2                      break;
 256   2              case E_LEVEL_PULL:
 257   2      
 258   2      #if 1
 259   2                      g_tWork.sum = 0;
 260   2                      g_tWork.cal_num = 0;
 261   2      
 262   2      //              app_UI_init();
 263   2      
 264   2                      LCD_Show_Pulls_Num(g_tWork.sum);
 265   2                      LCD_Show_CAL_Num(g_tWork.cal_num);
 266   2      
 267   2                      switch (g_tDevice.mode) {
 268   3                      case E_TRAINING_NONE:
 269   3      
 270   3                              break;
 271   3                      case E_Simple_metering_mode:
 272   3      
 273   3                              LCD_Show_Line_up();
 274   3                              LCD_Clear_REP_ICO();
 275   3      
 276   3                              LCD_Clear_REP_Num();
 277   3      
 278   3                              LCD_Clear_ABCD();
 279   3      
 280   3                              LCD_Show_CAL_ICO();
 281   3                              LCD_Clear_QS_ICO();
 282   3                              LCD_Clear_COACH_ICO();
 283   3      
 284   3                              break;
 285   3                      case E_Quick_start_mode:
 286   3      
 287   3                              LCD_Show_Line_up();
 288   3                              LCD_Show_REP_ICO();
 289   3                              LCD_Show_REP_Num(0);
 290   3                              LCD_Show_ABCD(g_tWork.reps_mode);
 291   3      
 292   3                              LCD_Show_CAL_ICO();
 293   3                              LCD_Show_QS_ICO();
 294   3                              LCD_Clear_COACH_ICO();
 295   3                              break;
 296   3                      case E_Coach_mode:
 297   3      
 298   3                              LCD_Show_Line_up();
 299   3                              LCD_Show_REP_ICO();
 300   3                              LCD_Show_REP_Num(0);
 301   3                              LCD_Show_ABCD(g_tWork.reps_mode);
C51 COMPILER V9.56.0.0   APP_KEY                                                           09/22/2017 22:48:12 PAGE 6   

 302   3      
 303   3                              LCD_Show_CAL_ICO();
 304   3                              LCD_Clear_QS_ICO();
 305   3                              LCD_Show_COACH_ICO();
 306   3      
 307   3                              break;
 308   3                      }
 309   2      #endif
 310   2      
 311   2                      break;
 312   2              }
 313   1      
 314   1      }
 315          
 316          void app_key_clear(void) {
 317   1      #if 0
                      LCD_Show_REP_Num(0);
                      LCD_Show_Pulls_Num(0);
                      LCD_Show_CAL_Num(0);
              
                      LCD_Show_Line_up();
                      LCD_Show_REP_ICO();
              
                      LCD_Show_ABCD_all();
              
                      LCD_Show_CAL_ICO();
              
                      g_tDevice.mode = E_Quick_start_mode;
              
                      g_tDevice.level = E_LEVEL_MODE;
              #endif
 333   1      
 334   1              switch (g_tDevice.level) {
 335   2              case E_LEVEL_NONE:
 336   2      
 337   2                      break;
 338   2              case E_LEVEL_MODE:
 339   2                      switch (g_tWork.mode) {
 340   3                      case E_Simple_metering_mode:
 341   3      
 342   3                              break;
 343   3                      case E_Quick_start_mode:
 344   3      
 345   3                              break;
 346   3                      case E_Coach_mode:
 347   3      
 348   3                              break;
 349   3                      }
 350   2                      break;
 351   2              case E_LEVEL_REP:
 352   2                      g_tDevice.level = E_LEVEL_MODE;
 353   2      
 354   2                      LCD_Show_ABCD('A');
 355   2                      LCD_Show_ABCD('B');
 356   2                      LCD_Show_ABCD('C');
 357   2                      LCD_Show_ABCD('D');
 358   2      
 359   2                      LCD_Show_REP_Num(0);
 360   2                      LCD_Show_Pulls_Num(0);
 361   2                      LCD_Show_CAL_Num(0);
 362   2                      LCD_Show_CAL_ICO();
 363   2      
C51 COMPILER V9.56.0.0   APP_KEY                                                           09/22/2017 22:48:12 PAGE 7   

 364   2                      break;
 365   2              case E_LEVEL_READY:
 366   2                      g_tDevice.level = E_LEVEL_REP;
 367   2      
 368   2                      break;
 369   2              case E_LEVEL_PULL:
 370   2      
 371   2                      break;
 372   2              }
 373   1      }
 374          
 375          static void app_key_clear_long(void) {
 376   1      
 377   1              switch (g_tDevice.level) {
 378   2              case E_LEVEL_NONE:
 379   2      
 380   2                      break;
 381   2              case E_LEVEL_MODE:
 382   2      
 383   2                      break;
 384   2              case E_LEVEL_REP:
 385   2      
 386   2                      break;
 387   2              case E_LEVEL_READY:
 388   2      
 389   2                      break;
 390   2              case E_LEVEL_PULL:
 391   2                      g_tWork.reps_num = 0;
 392   2                      g_tWork.pulls_num = 0;
 393   2                      g_tWork.cal_num = 0;
 394   2      
 395   2                      LCD_Show_REP_Num(g_tWork.reps_num);
 396   2                      LCD_Show_Pulls_Num(g_tWork.pulls_num);
 397   2                      LCD_Show_CAL_Num(g_tWork.cal_num);
 398   2      
 399   2                      break;
 400   2              }
 401   1      }
 402          
 403          void app_key_set(void) {
 404   1      
 405   1              switch (g_tDevice.level) {
 406   2              case E_LEVEL_NONE:
 407   2      
 408   2                      break;
 409   2              case E_LEVEL_MODE:
 410   2                      switch (g_tDevice.mode) {
 411   3                      case E_TRAINING_NONE:
 412   3      
 413   3                              break;
 414   3                      case E_Simple_metering_mode:
 415   3                              g_tDevice.mode = E_Quick_start_mode;
 416   3      
 417   3                              LCD_Show_REP_Num(0);
 418   3                              LCD_Show_REP_ICO();
 419   3                              LCD_Show_Line_up();
 420   3      
 421   3                              LCD_Show_ABCD('A');
 422   3                              LCD_Show_ABCD('B');
 423   3                              LCD_Show_ABCD('C');
 424   3                              LCD_Show_ABCD('D');
 425   3      
C51 COMPILER V9.56.0.0   APP_KEY                                                           09/22/2017 22:48:12 PAGE 8   

 426   3                              LCD_Show_CAL_ICO();
 427   3      
 428   3                              LCD_Clear_COACH_ICO();
 429   3      
 430   3                              break;
 431   3                      case E_Quick_start_mode:
 432   3                              g_tDevice.mode = E_Coach_mode;
 433   3      
 434   3                              LCD_Show_REP_Num(0);
 435   3                              LCD_Show_REP_ICO();
 436   3                              LCD_Show_Line_up();
 437   3      
 438   3                              LCD_Show_ABCD('A');
 439   3                              LCD_Show_ABCD('B');
 440   3                              LCD_Show_ABCD('C');
 441   3                              LCD_Show_ABCD('D');
 442   3      
 443   3                              LCD_Show_CAL_ICO();
 444   3      
 445   3                              LCD_Clear_COACH_ICO();
 446   3                              break;
 447   3                      case E_Coach_mode:
 448   3                              g_tDevice.mode = E_Simple_metering_mode;
 449   3      
 450   3                              LCD_Show_Line_up();
 451   3                              LCD_Clear_REP_ICO();
 452   3      
 453   3                              LCD_Clear_ABCD();
 454   3      
 455   3                              LCD_Show_CAL_ICO();
 456   3                              LCD_Clear_QS_ICO();
 457   3                              LCD_Clear_COACH_ICO();
 458   3      
 459   3                              LCD_Clear_REP_Num();
 460   3      
 461   3                              break;
 462   3                      }
 463   2                      break;
 464   2              case E_LEVEL_REP:
 465   2                      switch (g_tDevice.mode) {
 466   3                      case E_TRAINING_NONE:
 467   3      
 468   3                              break;
 469   3                      case E_Simple_metering_mode:
 470   3      
 471   3                              break;
 472   3                      case E_Quick_start_mode:
 473   3      
 474   3                              if (g_tDevice.letter == '\0') {
 475   4                                      g_tDevice.letter = 'A';
 476   4                              } else {
 477   4                                      g_tDevice.letter++;
 478   4                                      if (g_tDevice.letter > 'D') {
 479   5                                              g_tDevice.letter = 'A';
 480   5                                      }
 481   4                              }
 482   3      
 483   3                              break;
 484   3                      case E_Coach_mode:
 485   3                              if (g_tDevice.letter == '\0') {
 486   4                                      g_tDevice.letter = 'A';
 487   4                              } else {
C51 COMPILER V9.56.0.0   APP_KEY                                                           09/22/2017 22:48:12 PAGE 9   

 488   4                                      g_tDevice.letter++;
 489   4                                      if (g_tDevice.letter > 'D') {
 490   5                                              g_tDevice.letter = 'A';
 491   5                                      }
 492   4                              }
 493   3                              break;
 494   3                      }
 495   2                      break;
 496   2              case E_LEVEL_READY:
 497   2                      break;
 498   2              case E_LEVEL_PULL:
 499   2      
 500   2                      break;
 501   2              }
 502   1      }
 503          
 504          static void app_key_set_long(void) {
 505   1      
 506   1              switch (g_tDevice.level) {
 507   2              case E_LEVEL_NONE:
 508   2      
 509   2                      break;
 510   2              case E_LEVEL_MODE:
 511   2      
 512   2                      break;
 513   2              case E_LEVEL_REP:
 514   2      
 515   2                      break;
 516   2              case E_LEVEL_READY:
 517   2      
 518   2                      break;
 519   2              case E_LEVEL_PULL:
 520   2                      if (g_tDevice.mode == E_Simple_metering_mode) {
 521   3                              g_tDevice.level = E_LEVEL_MODE;
 522   3                      } else {
 523   3                              g_tDevice.level = E_LEVEL_REP;
 524   3                      }
 525   2                      BEEP_Stop();
 526   2                      break;
 527   2              }
 528   1      
 529   1      }
 530          
 531          void app_key_ok(void) {
 532   1      
 533   1              switch (g_tDevice.level) {
 534   2              case E_LEVEL_NONE:
 535   2      
 536   2                      break;
 537   2              case E_LEVEL_MODE:
 538   2      
 539   2                      switch (g_tDevice.mode) {
 540   3                      case E_TRAINING_NONE:
 541   3      
 542   3                              break;
 543   3                      case E_Simple_metering_mode:
 544   3                              g_tDevice.level = E_LEVEL_READY;
 545   3                              break;
 546   3                      case E_Quick_start_mode:
 547   3                              g_tDevice.level = E_LEVEL_REP;
 548   3      
 549   3                              LCD_Show_REP_ICO();
C51 COMPILER V9.56.0.0   APP_KEY                                                           09/22/2017 22:48:12 PAGE 10  

 550   3                              LCD_Show_QS_ICO();
 551   3                              LCD_Clear_COACH_ICO();
 552   3      
 553   3                              break;
 554   3                      case E_Coach_mode:
 555   3                              g_tDevice.level = E_LEVEL_REP;
 556   3      
 557   3                              LCD_Show_REP_ICO();
 558   3                              LCD_Clear_QS_ICO();
 559   3                              LCD_Show_COACH_ICO();
 560   3      
 561   3                              break;
 562   3                      }
 563   2                      g_tDevice.letter = g_tWork.reps_mode;
 564   2      
 565   2                      break;
 566   2              case E_LEVEL_REP:
 567   2                      switch (g_tDevice.mode) {
 568   3                      case E_TRAINING_NONE:
 569   3      
 570   3                              break;
 571   3                      case E_Simple_metering_mode:
 572   3      
 573   3                              break;
 574   3                      case E_Quick_start_mode:
 575   3      
 576   3                              LCD_Show_QS_ICO();
 577   3                              LCD_Clear_COACH_ICO();
 578   3      
 579   3                              break;
 580   3                      case E_Coach_mode:
 581   3                              LCD_Show_COACH_ICO();
 582   3                              LCD_Clear_QS_ICO();
 583   3      
 584   3                              break;
 585   3                      }
 586   2                      g_tWork.mode = g_tDevice.mode;
 587   2                      g_tWork.reps_mode = g_tDevice.letter;
 588   2                      g_tWork.sum = 0;
 589   2                      g_tDevice.level = E_LEVEL_READY;
 590   2                      break;
 591   2              case E_LEVEL_READY:
 592   2      
 593   2                      break;
 594   2              case E_LEVEL_PULL:
 595   2      
 596   2                      break;
 597   2              }
 598   1      }
 599          
 600          static void app_key_ok_long(void) {
 601   1      
 602   1              switch (g_tDevice.level) {
 603   2              case E_LEVEL_NONE:
 604   2      
 605   2                      break;
 606   2              case E_LEVEL_MODE:
 607   2      
 608   2                      break;
 609   2              case E_LEVEL_REP:
 610   2      
 611   2                      break;
C51 COMPILER V9.56.0.0   APP_KEY                                                           09/22/2017 22:48:12 PAGE 11  

 612   2              case E_LEVEL_READY:
 613   2      
 614   2                      break;
 615   2              case E_LEVEL_PULL:
 616   2      
 617   2                      break;
 618   2              }
 619   1              SW_Reset();  //复位
 620   1      }
 621          
 622          void app_power_on(void) {
 623   1              SW_Reset();  //复位
 624   1      }
 625          void app_power_off(void) {
 626   1              lcd_bright_off();
 627   1              LCD_Clear_All();
 628   1      }
 629          
 630          uint8_t noOps_timeoutCnt = 0;
 631          static BIT offBight_flag = 0;
 632          
 633          void app_key_100ms_pro(void) {
 634   1              static uint8_t cnt = 0;
 635   1      
 636   1              if (g_tDevice.status == E_PowerDown) {
 637   2                      cnt++;
 638   2                      if (cnt >= 3) {
 639   3                              cnt = 0;
 640   3      
 641   3                              app_key_clear_noOps_timeoutCnt();
 642   3      //                      keyInvalid_flag = 1;
 643   3                              bsp_hallInt_close();
 644   3                              app_powerKeyInt_open();
 645   3                              printf("power off\n");
 646   3                              set_PD;
 647   3      
 648   3                              printf("power on\n");
 649   3                              app_power_on();
 650   3                      }
 651   2              } else {
 652   2                      cnt = 0;
 653   2              }
 654   1      }
 655          
 656          void app_key_1s_pro(void) {
 657   1      
 658   1              noOps_timeoutCnt++;
 659   1              if (noOps_timeoutCnt == 400) {
 660   2                      offBight_flag = 1;
 661   2      //              keyInvalid_flag = 1;
 662   2                      lcd_bright_off();
 663   2                      printf("off bright\n");
 664   2              } else if (noOps_timeoutCnt == 500) {
 665   2                      app_power_off();
 666   2                      printf("power off\n");
 667   2                      g_tDevice.status = E_PowerDown;
 668   2              }
 669   1      
 670   1      }
 671          void app_key_clear_noOps_timeoutCnt(void) {
 672   1              noOps_timeoutCnt = 0;
 673   1      }
C51 COMPILER V9.56.0.0   APP_KEY                                                           09/22/2017 22:48:12 PAGE 12  

 674          void app_key_pro(uint8_t keyCode) {
 675   1              static BIT key_exe_flag = 0;
 676   1      
 677   1              app_key_clear_noOps_timeoutCnt();
 678   1      
 679   1              if (offBight_flag && (g_tDevice.status == E_PowerOn)) {
 680   2                      offBight_flag = 0;
 681   2                      lcd_bright_on();
 682   2                      //      keyInvalid_flag = 1;
 683   2                      return;
 684   2              }
 685   1      
 686   1              switch (keyCode) {
 687   2              case KEY_UP_K1:
 688   2      
 689   2                      break;
 690   2              case KEY_DOWN_K1:
 691   2      
 692   2                      break;
 693   2              case KEY_LONG_K1:
 694   2                      printf("POWER long\n");
 695   2                      if (g_tDevice.status == E_PowerOn) {
 696   3                              g_tDevice.status = E_PowerDown;
 697   3                              printf("key power off\n");
 698   3                              app_power_off();
 699   3                      }
 700   2      
 701   2                      break;
 702   2              case KEY_UP_K2:
 703   2                      if (key_exe_flag) {
 704   3                              key_exe_flag = 0;
 705   3                      } else {
 706   3                              printf("CLEAR click\n");
 707   3                              app_key_clear();
 708   3                      }
 709   2      
 710   2                      break;
 711   2              case KEY_DOWN_K2:
 712   2      
 713   2                      break;
 714   2              case KEY_LONG_K2:
 715   2                      printf("CLEAR long\n");
 716   2                      key_exe_flag = 1;
 717   2                      app_key_clear_long();
 718   2      
 719   2                      break;
 720   2              case KEY_UP_K3:
 721   2                      if (key_exe_flag) {
 722   3                              key_exe_flag = 0;
 723   3                      } else {
 724   3                              printf("SET click\n");
 725   3                              app_key_set();
 726   3                      }
 727   2                      break;
 728   2              case KEY_DOWN_K3:
 729   2      
 730   2                      break;
 731   2              case KEY_LONG_K3:
 732   2                      printf("SET long\n");
 733   2                      key_exe_flag = 1;
 734   2                      app_key_set_long();
 735   2      
C51 COMPILER V9.56.0.0   APP_KEY                                                           09/22/2017 22:48:12 PAGE 13  

 736   2                      break;
 737   2              case KEY_UP_K4:
 738   2                      if (key_exe_flag) {
 739   3                              key_exe_flag = 0;
 740   3                      } else {
 741   3                              printf("OK click\n");
 742   3                              app_key_ok();
 743   3                      }
 744   2                      break;
 745   2              case KEY_DOWN_K4:
 746   2      
 747   2                      break;
 748   2              case KEY_LONG_K4:
 749   2                      printf("OK long\n");
 750   2                      key_exe_flag = 1;
 751   2                      app_key_ok_long();
 752   2      
 753   2                      break;
 754   2      #if DEBUG_KEY
                              case KEY_UP_K5:
              
                              break;
                              case KEY_DOWN_K5:
                              //BEEP_KeyTone();
                              query_work_sum();
                              break;
                              case KEY_LONG_K5:
              
                              break;
              #endif
 766   2              case KEY_UP_K1K3:
 767   2      
 768   2                      break;
 769   2              case KEY_DOWN_K1K3:
 770   2      
 771   2                      break;
 772   2              case KEY_LONG_K1K3:
 773   2      
 774   2                      break;
 775   2              default:
 776   2      //              BEEP_KeyTone();
 777   2                      break;
 778   2      
 779   2              }
 780   1      }
 781          


MODULE INFORMATION:   STATIC OVERLAYABLE
   CODE SIZE        =   1484    ----
   CONSTANT SIZE    =    125    ----
   XDATA SIZE       =      6       1
   PDATA SIZE       =   ----    ----
   DATA SIZE        =   ----    ----
   IDATA SIZE       =   ----    ----
   BIT SIZE         =      2    ----
END OF MODULE INFORMATION.


C51 COMPILATION COMPLETE.  0 WARNING(S),  0 ERROR(S)
